/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 * 
 * Manually modified to add `EmitDefaultValue = false` in all properties. Null fields are ignored for PATCH requests.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// EventTypePatch
    /// </summary>
    [DataContract(Name = "EventTypePatch")]
    public partial class EventTypePatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventTypePatch" /> class.
        /// </summary>
        /// <param name="archived">archived.</param>
        /// <param name="deprecated">deprecated.</param>
        /// <param name="description">description.</param>
        /// <param name="featureFlag">featureFlag.</param>
        /// <param name="groupName">The event type group&#39;s name.</param>
        /// <param name="schemas">schemas.</param>
        public EventTypePatch(bool archived = default(bool), bool deprecated = default(bool), string description = default(string), string featureFlag = default(string), string groupName = default(string), Dictionary<string, Object> schemas = default(Dictionary<string, Object>))
        {
            this.Archived = archived;
            this.Deprecated = deprecated;
            this.Description = description;
            this.FeatureFlag = featureFlag;
            this.GroupName = groupName;
            this.Schemas = schemas;
        }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", EmitDefaultValue = false)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets Deprecated
        /// </summary>
        [DataMember(Name = "deprecated", EmitDefaultValue = false)]
        public bool Deprecated { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FeatureFlag
        /// </summary>
        /*
        <example>cool-new-feature</example>
        */
        [DataMember(Name = "featureFlag", EmitDefaultValue = false)]
        public string FeatureFlag { get; set; }

        /// <summary>
        /// The event type group&#39;s name
        /// </summary>
        /// <value>The event type group&#39;s name</value>
        /*
        <example>user</example>
        */
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Schemas
        /// </summary>
        /*
        <example>{&quot;description&quot;:&quot;An invoice was paid by a user&quot;,&quot;properties&quot;:{&quot;invoiceId&quot;:{&quot;description&quot;:&quot;The invoice id&quot;,&quot;type&quot;:&quot;string&quot;},&quot;userId&quot;:{&quot;description&quot;:&quot;The user id&quot;,&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;invoiceId&quot;,&quot;userId&quot;],&quot;title&quot;:&quot;Invoice Paid Event&quot;,&quot;type&quot;:&quot;object&quot;}</example>
        */
        [DataMember(Name = "schemas", EmitDefaultValue = false)]
        public Dictionary<string, Object> Schemas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventTypePatch {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FeatureFlag: ").Append(FeatureFlag).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FeatureFlag (string) maxLength
            if (this.FeatureFlag != null && this.FeatureFlag.Length > 256)
            {
                yield return new ValidationResult("Invalid value for FeatureFlag, length must be less than 256.", new[] { "FeatureFlag" });
            }

            if (this.FeatureFlag != null)
            {
                // FeatureFlag (string) pattern
                Regex regexFeatureFlag = new Regex(@"^[a-zA-Z0-9\-_.]+$", RegexOptions.CultureInvariant);
                if (!regexFeatureFlag.Match(this.FeatureFlag).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeatureFlag, must match a pattern of " + regexFeatureFlag, new[] { "FeatureFlag" });
                }
            }

            // GroupName (string) maxLength
            if (this.GroupName != null && this.GroupName.Length > 256)
            {
                yield return new ValidationResult("Invalid value for GroupName, length must be less than 256.", new[] { "GroupName" });
            }

            if (this.GroupName != null)
            {
                // GroupName (string) pattern
                Regex regexGroupName = new Regex(@"^[a-zA-Z0-9\-_.]+$", RegexOptions.CultureInvariant);
                if (!regexGroupName.Match(this.GroupName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupName, must match a pattern of " + regexGroupName, new[] { "GroupName" });
                }
            }

            yield break;
        }
    }

}
