/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// AppPortalAccessIn
    /// </summary>
    [DataContract(Name = "AppPortalAccessIn")]
    public partial class AppPortalAccessIn : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppPortalAccessIn" /> class.
        /// </summary>
        /// <param name="application">application.</param>
        /// <param name="expiry">How long the token will be valid for, in seconds.  Valid values are between 1 hour and 7 days. The default is 7 days. (default to 604800).</param>
        /// <param name="featureFlags">The set of feature flags the created token will have access to..</param>
        /// <param name="readOnly">Whether the app portal should be in read-only mode..</param>
        public AppPortalAccessIn(ApplicationIn application = default(ApplicationIn), int? expiry = 604800, List<string> featureFlags = default(List<string>), bool? readOnly = default(bool?))
        {
            this.Application = application;
            // use default value if no "expiry" provided
            this.Expiry = expiry ?? 604800;
            this.FeatureFlags = featureFlags;
            this.ReadOnly = readOnly;
        }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public ApplicationIn Application { get; set; }

        /// <summary>
        /// How long the token will be valid for, in seconds.  Valid values are between 1 hour and 7 days. The default is 7 days.
        /// </summary>
        /// <value>How long the token will be valid for, in seconds.  Valid values are between 1 hour and 7 days. The default is 7 days.</value>
        [DataMember(Name = "expiry", EmitDefaultValue = true)]
        public int? Expiry { get; set; }

        /// <summary>
        /// The set of feature flags the created token will have access to.
        /// </summary>
        /// <value>The set of feature flags the created token will have access to.</value>
        /*
        <example>[]</example>
        */
        [DataMember(Name = "featureFlags", EmitDefaultValue = false)]
        public List<string> FeatureFlags { get; set; }

        /// <summary>
        /// Whether the app portal should be in read-only mode.
        /// </summary>
        /// <value>Whether the app portal should be in read-only mode.</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppPortalAccessIn {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Expiry (int?) maximum
            if (this.Expiry > (int?)604800)
            {
                yield return new ValidationResult("Invalid value for Expiry, must be a value less than or equal to 604800.", new [] { "Expiry" });
            }

            // Expiry (int?) minimum
            if (this.Expiry < (int?)3600)
            {
                yield return new ValidationResult("Invalid value for Expiry, must be a value greater than or equal to 3600.", new [] { "Expiry" });
            }

            yield break;
        }
    }

}
