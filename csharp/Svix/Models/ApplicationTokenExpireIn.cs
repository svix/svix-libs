/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// ApplicationTokenExpireIn
    /// </summary>
    [DataContract(Name = "ApplicationTokenExpireIn")]
    public partial class ApplicationTokenExpireIn : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationTokenExpireIn" /> class.
        /// </summary>
        /// <param name="expiry">How many seconds until the old key is expired..</param>
        public ApplicationTokenExpireIn(long? expiry = default(long?))
        {
            this.Expiry = expiry;
        }

        /// <summary>
        /// How many seconds until the old key is expired.
        /// </summary>
        /// <value>How many seconds until the old key is expired.</value>
        /*
        <example>60</example>
        */
        [DataMember(Name = "expiry", EmitDefaultValue = true)]
        public long? Expiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationTokenExpireIn {\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Expiry (long?) maximum
            if (this.Expiry > (long?)259200)
            {
                yield return new ValidationResult("Invalid value for Expiry, must be a value less than or equal to 259200.", new [] { "Expiry" });
            }

            // Expiry (long?) minimum
            if (this.Expiry < (long?)0)
            {
                yield return new ValidationResult("Invalid value for Expiry, must be a value greater than or equal to 0.", new [] { "Expiry" });
            }

            yield break;
        }
    }

}
