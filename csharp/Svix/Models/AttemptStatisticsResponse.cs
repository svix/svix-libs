/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// AttemptStatisticsResponse
    /// </summary>
    [DataContract(Name = "AttemptStatisticsResponse")]
    public partial class AttemptStatisticsResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public StatisticsPeriod Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttemptStatisticsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttemptStatisticsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttemptStatisticsResponse" /> class.
        /// </summary>
        /// <param name="data">data (required).</param>
        /// <param name="endDate">endDate (required).</param>
        /// <param name="period">period (required).</param>
        /// <param name="startDate">startDate (required).</param>
        public AttemptStatisticsResponse(AttemptStatisticsData data = default(AttemptStatisticsData), DateTime endDate = default(DateTime), StatisticsPeriod period = default(StatisticsPeriod), DateTime startDate = default(DateTime))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for AttemptStatisticsResponse and cannot be null");
            }
            this.Data = data;
            this.EndDate = endDate;
            this.Period = period;
            this.StartDate = startDate;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public AttemptStatisticsData Data { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttemptStatisticsResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
