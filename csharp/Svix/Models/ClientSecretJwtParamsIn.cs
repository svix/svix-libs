/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// ClientSecretJwtParamsIn
    /// </summary>
    [DataContract(Name = "ClientSecretJwtParamsIn")]
    public partial class ClientSecretJwtParamsIn : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SigningAlgorithm
        /// </summary>
        [DataMember(Name = "signingAlgorithm", IsRequired = true, EmitDefaultValue = true)]
        public OauthJwsSigningAlgorithm SigningAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSecretJwtParamsIn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientSecretJwtParamsIn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSecretJwtParamsIn" /> class.
        /// </summary>
        /// <param name="secretBase64">The base64-encoded secret used for signing the JWT. (required).</param>
        /// <param name="secretId">Optional secret identifier. If supplied, this will be populated in the JWT header in the &#x60;kid&#x60; field..</param>
        /// <param name="signingAlgorithm">signingAlgorithm (required).</param>
        /// <param name="tokenExpirySecs">Optional number of seconds after which the JWT should expire. Defaults to 300 seconds..</param>
        public ClientSecretJwtParamsIn(string secretBase64 = default(string), string secretId = default(string), OauthJwsSigningAlgorithm signingAlgorithm = default(OauthJwsSigningAlgorithm), int? tokenExpirySecs = default(int?))
        {
            // to ensure "secretBase64" is required (not null)
            if (secretBase64 == null)
            {
                throw new ArgumentNullException("secretBase64 is a required property for ClientSecretJwtParamsIn and cannot be null");
            }
            this.SecretBase64 = secretBase64;
            this.SigningAlgorithm = signingAlgorithm;
            this.SecretId = secretId;
            this.TokenExpirySecs = tokenExpirySecs;
        }

        /// <summary>
        /// The base64-encoded secret used for signing the JWT.
        /// </summary>
        /// <value>The base64-encoded secret used for signing the JWT.</value>
        [DataMember(Name = "secretBase64", IsRequired = true, EmitDefaultValue = true)]
        public string SecretBase64 { get; set; }

        /// <summary>
        /// Optional secret identifier. If supplied, this will be populated in the JWT header in the &#x60;kid&#x60; field.
        /// </summary>
        /// <value>Optional secret identifier. If supplied, this will be populated in the JWT header in the &#x60;kid&#x60; field.</value>
        [DataMember(Name = "secretId", EmitDefaultValue = true)]
        public string SecretId { get; set; }

        /// <summary>
        /// Optional number of seconds after which the JWT should expire. Defaults to 300 seconds.
        /// </summary>
        /// <value>Optional number of seconds after which the JWT should expire. Defaults to 300 seconds.</value>
        [DataMember(Name = "tokenExpirySecs", EmitDefaultValue = true)]
        public int? TokenExpirySecs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientSecretJwtParamsIn {\n");
            sb.Append("  SecretBase64: ").Append(SecretBase64).Append("\n");
            sb.Append("  SecretId: ").Append(SecretId).Append("\n");
            sb.Append("  SigningAlgorithm: ").Append(SigningAlgorithm).Append("\n");
            sb.Append("  TokenExpirySecs: ").Append(TokenExpirySecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TokenExpirySecs (int?) minimum
            if (this.TokenExpirySecs < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TokenExpirySecs, must be a value greater than or equal to 0.", new [] { "TokenExpirySecs" });
            }

            yield break;
        }
    }

}
