/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// CustomColorPalette
    /// </summary>
    [DataContract(Name = "CustomColorPalette")]
    public partial class CustomColorPalette : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomColorPalette" /> class.
        /// </summary>
        /// <param name="backgroundHover">backgroundHover.</param>
        /// <param name="backgroundPrimary">backgroundPrimary.</param>
        /// <param name="backgroundSecondary">backgroundSecondary.</param>
        /// <param name="buttonPrimary">buttonPrimary.</param>
        /// <param name="interactiveAccent">interactiveAccent.</param>
        /// <param name="navigationAccent">navigationAccent.</param>
        /// <param name="primary">primary.</param>
        /// <param name="textDanger">textDanger.</param>
        /// <param name="textPrimary">textPrimary.</param>
        public CustomColorPalette(string backgroundHover = default(string), string backgroundPrimary = default(string), string backgroundSecondary = default(string), string buttonPrimary = default(string), string interactiveAccent = default(string), string navigationAccent = default(string), string primary = default(string), string textDanger = default(string), string textPrimary = default(string))
        {
            this.BackgroundHover = backgroundHover;
            this.BackgroundPrimary = backgroundPrimary;
            this.BackgroundSecondary = backgroundSecondary;
            this.ButtonPrimary = buttonPrimary;
            this.InteractiveAccent = interactiveAccent;
            this.NavigationAccent = navigationAccent;
            this.Primary = primary;
            this.TextDanger = textDanger;
            this.TextPrimary = textPrimary;
        }

        /// <summary>
        /// Gets or Sets BackgroundHover
        /// </summary>
        [DataMember(Name = "backgroundHover", EmitDefaultValue = true)]
        public string BackgroundHover { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundPrimary
        /// </summary>
        [DataMember(Name = "backgroundPrimary", EmitDefaultValue = true)]
        public string BackgroundPrimary { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundSecondary
        /// </summary>
        [DataMember(Name = "backgroundSecondary", EmitDefaultValue = true)]
        public string BackgroundSecondary { get; set; }

        /// <summary>
        /// Gets or Sets ButtonPrimary
        /// </summary>
        [DataMember(Name = "buttonPrimary", EmitDefaultValue = true)]
        public string ButtonPrimary { get; set; }

        /// <summary>
        /// Gets or Sets InteractiveAccent
        /// </summary>
        [DataMember(Name = "interactiveAccent", EmitDefaultValue = true)]
        public string InteractiveAccent { get; set; }

        /// <summary>
        /// Gets or Sets NavigationAccent
        /// </summary>
        [DataMember(Name = "navigationAccent", EmitDefaultValue = true)]
        public string NavigationAccent { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name = "primary", EmitDefaultValue = true)]
        public string Primary { get; set; }

        /// <summary>
        /// Gets or Sets TextDanger
        /// </summary>
        [DataMember(Name = "textDanger", EmitDefaultValue = true)]
        public string TextDanger { get; set; }

        /// <summary>
        /// Gets or Sets TextPrimary
        /// </summary>
        [DataMember(Name = "textPrimary", EmitDefaultValue = true)]
        public string TextPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomColorPalette {\n");
            sb.Append("  BackgroundHover: ").Append(BackgroundHover).Append("\n");
            sb.Append("  BackgroundPrimary: ").Append(BackgroundPrimary).Append("\n");
            sb.Append("  BackgroundSecondary: ").Append(BackgroundSecondary).Append("\n");
            sb.Append("  ButtonPrimary: ").Append(ButtonPrimary).Append("\n");
            sb.Append("  InteractiveAccent: ").Append(InteractiveAccent).Append("\n");
            sb.Append("  NavigationAccent: ").Append(NavigationAccent).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  TextDanger: ").Append(TextDanger).Append("\n");
            sb.Append("  TextPrimary: ").Append(TextPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
