/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// DataAnyOf
    /// </summary>
    [DataContract(Name = "Data_anyOf")]
    public partial class DataAnyOf : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnyOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataAnyOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnyOf" /> class.
        /// </summary>
        /// <param name="messagesSent">messagesSent (required).</param>
        public DataAnyOf(int messagesSent = default(int))
        {
            this.MessagesSent = messagesSent;
        }

        /// <summary>
        /// Gets or Sets MessagesSent
        /// </summary>
        [DataMember(Name = "messages_sent", IsRequired = true, EmitDefaultValue = true)]
        public int MessagesSent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataAnyOf {\n");
            sb.Append("  MessagesSent: ").Append(MessagesSent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MessagesSent (int) minimum
            if (this.MessagesSent < (int)0)
            {
                yield return new ValidationResult("Invalid value for MessagesSent, must be a value greater than or equal to 0.", new [] { "MessagesSent" });
            }

            yield break;
        }
    }

}
