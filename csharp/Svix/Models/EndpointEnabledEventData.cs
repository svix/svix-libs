/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// Sent when an endpoint has been enabled.
    /// </summary>
    [DataContract(Name = "EndpointEnabledEventData")]
    public partial class EndpointEnabledEventData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointEnabledEventData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EndpointEnabledEventData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointEnabledEventData" /> class.
        /// </summary>
        /// <param name="appId">The app&#39;s ID (required).</param>
        /// <param name="appUid">The app&#39;s UID.</param>
        /// <param name="endpointId">The ep&#39;s ID (required).</param>
        /// <param name="endpointUid">The ep&#39;s UID.</param>
        public EndpointEnabledEventData(string appId = default(string), string appUid = default(string), string endpointId = default(string), string endpointUid = default(string))
        {
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new ArgumentNullException("appId is a required property for EndpointEnabledEventData and cannot be null");
            }
            this.AppId = appId;
            // to ensure "endpointId" is required (not null)
            if (endpointId == null)
            {
                throw new ArgumentNullException("endpointId is a required property for EndpointEnabledEventData and cannot be null");
            }
            this.EndpointId = endpointId;
            this.AppUid = appUid;
            this.EndpointUid = endpointUid;
        }

        /// <summary>
        /// The app&#39;s ID
        /// </summary>
        /// <value>The app&#39;s ID</value>
        /*
        <example>app_1srOrx2ZWZBpBUvZwXKQmoEYga2</example>
        */
        [DataMember(Name = "appId", IsRequired = true, EmitDefaultValue = true)]
        public string AppId { get; set; }

        /// <summary>
        /// The app&#39;s UID
        /// </summary>
        /// <value>The app&#39;s UID</value>
        /*
        <example>unique-app-identifier</example>
        */
        [DataMember(Name = "appUid", EmitDefaultValue = true)]
        public string AppUid { get; set; }

        /// <summary>
        /// The ep&#39;s ID
        /// </summary>
        /// <value>The ep&#39;s ID</value>
        /*
        <example>ep_1srOrx2ZWZBpBUvZwXKQmoEYga2</example>
        */
        [DataMember(Name = "endpointId", IsRequired = true, EmitDefaultValue = true)]
        public string EndpointId { get; set; }

        /// <summary>
        /// The ep&#39;s UID
        /// </summary>
        /// <value>The ep&#39;s UID</value>
        /*
        <example>unique-ep-identifier</example>
        */
        [DataMember(Name = "endpointUid", EmitDefaultValue = true)]
        public string EndpointUid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndpointEnabledEventData {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AppUid: ").Append(AppUid).Append("\n");
            sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
            sb.Append("  EndpointUid: ").Append(EndpointUid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AppUid (string) maxLength
            if (this.AppUid != null && this.AppUid.Length > 256)
            {
                yield return new ValidationResult("Invalid value for AppUid, length must be less than 256.", new [] { "AppUid" });
            }

            // AppUid (string) minLength
            if (this.AppUid != null && this.AppUid.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AppUid, length must be greater than 1.", new [] { "AppUid" });
            }

            if (this.AppUid != null) {
                // AppUid (string) pattern
                Regex regexAppUid = new Regex(@"^[a-zA-Z0-9\-_.]+$", RegexOptions.CultureInvariant);
                if (!regexAppUid.Match(this.AppUid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppUid, must match a pattern of " + regexAppUid, new [] { "AppUid" });
                }
            }

            // EndpointUid (string) maxLength
            if (this.EndpointUid != null && this.EndpointUid.Length > 256)
            {
                yield return new ValidationResult("Invalid value for EndpointUid, length must be less than 256.", new [] { "EndpointUid" });
            }

            // EndpointUid (string) minLength
            if (this.EndpointUid != null && this.EndpointUid.Length < 1)
            {
                yield return new ValidationResult("Invalid value for EndpointUid, length must be greater than 1.", new [] { "EndpointUid" });
            }

            if (this.EndpointUid != null) {
                // EndpointUid (string) pattern
                Regex regexEndpointUid = new Regex(@"^[a-zA-Z0-9\-_.]+$", RegexOptions.CultureInvariant);
                if (!regexEndpointUid.Match(this.EndpointUid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndpointUid, must match a pattern of " + regexEndpointUid, new [] { "EndpointUid" });
                }
            }

            yield break;
        }
    }

}
