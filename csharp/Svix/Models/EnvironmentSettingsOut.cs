/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// EnvironmentSettingsOut
    /// </summary>
    [DataContract(Name = "EnvironmentSettingsOut")]
    public partial class EnvironmentSettingsOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentSettingsOut" /> class.
        /// </summary>
        /// <param name="colorPaletteDark">colorPaletteDark.</param>
        /// <param name="colorPaletteLight">colorPaletteLight.</param>
        /// <param name="customColor">customColor.</param>
        /// <param name="customFontFamily">customFontFamily.</param>
        /// <param name="customFontFamilyUrl">customFontFamilyUrl.</param>
        /// <param name="customLogoUrl">customLogoUrl.</param>
        /// <param name="customStringsOverride">customStringsOverride.</param>
        /// <param name="customThemeOverride">customThemeOverride.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="enableChannels">enableChannels (default to false).</param>
        /// <param name="enableEndpointOauthConfig">enableEndpointOauthConfig (default to false).</param>
        /// <param name="enableIntegrationManagement">enableIntegrationManagement (default to false).</param>
        /// <param name="enableMessageStream">enableMessageStream (default to false).</param>
        /// <param name="enableMessageTags">enableMessageTags (default to false).</param>
        /// <param name="enableTransformations">enableTransformations (default to false).</param>
        /// <param name="showUseSvixPlay">showUseSvixPlay (default to true).</param>
        /// <param name="wipeSuccessfulPayload">wipeSuccessfulPayload (default to false).</param>
        public EnvironmentSettingsOut(CustomColorPalette colorPaletteDark = default(CustomColorPalette), CustomColorPalette colorPaletteLight = default(CustomColorPalette), string customColor = default(string), string customFontFamily = default(string), string customFontFamilyUrl = default(string), string customLogoUrl = default(string), CustomStringsOverride customStringsOverride = default(CustomStringsOverride), CustomThemeOverride customThemeOverride = default(CustomThemeOverride), string displayName = default(string), bool enableChannels = false, bool enableEndpointOauthConfig = false, bool enableIntegrationManagement = false, bool enableMessageStream = false, bool enableMessageTags = false, bool enableTransformations = false, bool showUseSvixPlay = true, bool wipeSuccessfulPayload = false)
        {
            this.ColorPaletteDark = colorPaletteDark;
            this.ColorPaletteLight = colorPaletteLight;
            this.CustomColor = customColor;
            this.CustomFontFamily = customFontFamily;
            this.CustomFontFamilyUrl = customFontFamilyUrl;
            this.CustomLogoUrl = customLogoUrl;
            this.CustomStringsOverride = customStringsOverride;
            this.CustomThemeOverride = customThemeOverride;
            this.DisplayName = displayName;
            this.EnableChannels = enableChannels;
            this.EnableEndpointOauthConfig = enableEndpointOauthConfig;
            this.EnableIntegrationManagement = enableIntegrationManagement;
            this.EnableMessageStream = enableMessageStream;
            this.EnableMessageTags = enableMessageTags;
            this.EnableTransformations = enableTransformations;
            this.ShowUseSvixPlay = showUseSvixPlay;
            this.WipeSuccessfulPayload = wipeSuccessfulPayload;
        }

        /// <summary>
        /// Gets or Sets ColorPaletteDark
        /// </summary>
        [DataMember(Name = "colorPaletteDark", EmitDefaultValue = false)]
        public CustomColorPalette ColorPaletteDark { get; set; }

        /// <summary>
        /// Gets or Sets ColorPaletteLight
        /// </summary>
        [DataMember(Name = "colorPaletteLight", EmitDefaultValue = false)]
        public CustomColorPalette ColorPaletteLight { get; set; }

        /// <summary>
        /// Gets or Sets CustomColor
        /// </summary>
        [DataMember(Name = "customColor", EmitDefaultValue = true)]
        public string CustomColor { get; set; }

        /// <summary>
        /// Gets or Sets CustomFontFamily
        /// </summary>
        /*
        <example>Open Sans</example>
        */
        [DataMember(Name = "customFontFamily", EmitDefaultValue = true)]
        public string CustomFontFamily { get; set; }

        /// <summary>
        /// Gets or Sets CustomFontFamilyUrl
        /// </summary>
        [DataMember(Name = "customFontFamilyUrl", EmitDefaultValue = true)]
        public string CustomFontFamilyUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomLogoUrl
        /// </summary>
        [DataMember(Name = "customLogoUrl", EmitDefaultValue = true)]
        public string CustomLogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomStringsOverride
        /// </summary>
        [DataMember(Name = "customStringsOverride", EmitDefaultValue = false)]
        public CustomStringsOverride CustomStringsOverride { get; set; }

        /// <summary>
        /// Gets or Sets CustomThemeOverride
        /// </summary>
        [DataMember(Name = "customThemeOverride", EmitDefaultValue = false)]
        public CustomThemeOverride CustomThemeOverride { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets EnableChannels
        /// </summary>
        [DataMember(Name = "enableChannels", EmitDefaultValue = true)]
        public bool EnableChannels { get; set; }

        /// <summary>
        /// Gets or Sets EnableEndpointOauthConfig
        /// </summary>
        [DataMember(Name = "enableEndpointOauthConfig", EmitDefaultValue = true)]
        public bool EnableEndpointOauthConfig { get; set; }

        /// <summary>
        /// Gets or Sets EnableIntegrationManagement
        /// </summary>
        [DataMember(Name = "enableIntegrationManagement", EmitDefaultValue = true)]
        public bool EnableIntegrationManagement { get; set; }

        /// <summary>
        /// Gets or Sets EnableMessageStream
        /// </summary>
        [DataMember(Name = "enableMessageStream", EmitDefaultValue = true)]
        public bool EnableMessageStream { get; set; }

        /// <summary>
        /// Gets or Sets EnableMessageTags
        /// </summary>
        [DataMember(Name = "enableMessageTags", EmitDefaultValue = true)]
        public bool EnableMessageTags { get; set; }

        /// <summary>
        /// Gets or Sets EnableTransformations
        /// </summary>
        [DataMember(Name = "enableTransformations", EmitDefaultValue = true)]
        public bool EnableTransformations { get; set; }

        /// <summary>
        /// Gets or Sets ShowUseSvixPlay
        /// </summary>
        [DataMember(Name = "showUseSvixPlay", EmitDefaultValue = true)]
        public bool ShowUseSvixPlay { get; set; }

        /// <summary>
        /// Gets or Sets WipeSuccessfulPayload
        /// </summary>
        [DataMember(Name = "wipeSuccessfulPayload", EmitDefaultValue = true)]
        public bool WipeSuccessfulPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnvironmentSettingsOut {\n");
            sb.Append("  ColorPaletteDark: ").Append(ColorPaletteDark).Append("\n");
            sb.Append("  ColorPaletteLight: ").Append(ColorPaletteLight).Append("\n");
            sb.Append("  CustomColor: ").Append(CustomColor).Append("\n");
            sb.Append("  CustomFontFamily: ").Append(CustomFontFamily).Append("\n");
            sb.Append("  CustomFontFamilyUrl: ").Append(CustomFontFamilyUrl).Append("\n");
            sb.Append("  CustomLogoUrl: ").Append(CustomLogoUrl).Append("\n");
            sb.Append("  CustomStringsOverride: ").Append(CustomStringsOverride).Append("\n");
            sb.Append("  CustomThemeOverride: ").Append(CustomThemeOverride).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EnableChannels: ").Append(EnableChannels).Append("\n");
            sb.Append("  EnableEndpointOauthConfig: ").Append(EnableEndpointOauthConfig).Append("\n");
            sb.Append("  EnableIntegrationManagement: ").Append(EnableIntegrationManagement).Append("\n");
            sb.Append("  EnableMessageStream: ").Append(EnableMessageStream).Append("\n");
            sb.Append("  EnableMessageTags: ").Append(EnableMessageTags).Append("\n");
            sb.Append("  EnableTransformations: ").Append(EnableTransformations).Append("\n");
            sb.Append("  ShowUseSvixPlay: ").Append(ShowUseSvixPlay).Append("\n");
            sb.Append("  WipeSuccessfulPayload: ").Append(WipeSuccessfulPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CustomFontFamily != null) {
                // CustomFontFamily (string) pattern
                Regex regexCustomFontFamily = new Regex(@"^[a-zA-Z0-9\-_ ]+$", RegexOptions.CultureInvariant);
                if (!regexCustomFontFamily.Match(this.CustomFontFamily).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomFontFamily, must match a pattern of " + regexCustomFontFamily, new [] { "CustomFontFamily" });
                }
            }

            // CustomFontFamilyUrl (string) maxLength
            if (this.CustomFontFamilyUrl != null && this.CustomFontFamilyUrl.Length > 65536)
            {
                yield return new ValidationResult("Invalid value for CustomFontFamilyUrl, length must be less than 65536.", new [] { "CustomFontFamilyUrl" });
            }

            // CustomFontFamilyUrl (string) minLength
            if (this.CustomFontFamilyUrl != null && this.CustomFontFamilyUrl.Length < 1)
            {
                yield return new ValidationResult("Invalid value for CustomFontFamilyUrl, length must be greater than 1.", new [] { "CustomFontFamilyUrl" });
            }

            // CustomLogoUrl (string) maxLength
            if (this.CustomLogoUrl != null && this.CustomLogoUrl.Length > 65536)
            {
                yield return new ValidationResult("Invalid value for CustomLogoUrl, length must be less than 65536.", new [] { "CustomLogoUrl" });
            }

            // CustomLogoUrl (string) minLength
            if (this.CustomLogoUrl != null && this.CustomLogoUrl.Length < 1)
            {
                yield return new ValidationResult("Invalid value for CustomLogoUrl, length must be greater than 1.", new [] { "CustomLogoUrl" });
            }

            yield break;
        }
    }

}
