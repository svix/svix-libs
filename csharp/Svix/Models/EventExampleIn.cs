/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// EventExampleIn
    /// </summary>
    [DataContract(Name = "EventExampleIn")]
    public partial class EventExampleIn : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventExampleIn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventExampleIn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventExampleIn" /> class.
        /// </summary>
        /// <param name="eventType">The event type&#39;s name (required).</param>
        /// <param name="exampleIndex">If the event type schema contains an array of examples, chooses which one to send.  Defaults to the first example. Ignored if the schema doesn&#39;t contain an array of examples. (default to 0).</param>
        public EventExampleIn(string eventType = default(string), int exampleIndex = 0)
        {
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new ArgumentNullException("eventType is a required property for EventExampleIn and cannot be null");
            }
            this.EventType = eventType;
            this.ExampleIndex = exampleIndex;
        }

        /// <summary>
        /// The event type&#39;s name
        /// </summary>
        /// <value>The event type&#39;s name</value>
        /*
        <example>user.signup</example>
        */
        [DataMember(Name = "eventType", IsRequired = true, EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// If the event type schema contains an array of examples, chooses which one to send.  Defaults to the first example. Ignored if the schema doesn&#39;t contain an array of examples.
        /// </summary>
        /// <value>If the event type schema contains an array of examples, chooses which one to send.  Defaults to the first example. Ignored if the schema doesn&#39;t contain an array of examples.</value>
        [DataMember(Name = "exampleIndex", EmitDefaultValue = false)]
        public int ExampleIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventExampleIn {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ExampleIndex: ").Append(ExampleIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EventType (string) maxLength
            if (this.EventType != null && this.EventType.Length > 256)
            {
                yield return new ValidationResult("Invalid value for EventType, length must be less than 256.", new [] { "EventType" });
            }

            if (this.EventType != null) {
                // EventType (string) pattern
                Regex regexEventType = new Regex(@"^[a-zA-Z0-9\-_.]+$", RegexOptions.CultureInvariant);
                if (!regexEventType.Match(this.EventType).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventType, must match a pattern of " + regexEventType, new [] { "EventType" });
                }
            }

            // ExampleIndex (int) minimum
            if (this.ExampleIndex < (int)0)
            {
                yield return new ValidationResult("Invalid value for ExampleIndex, must be a value greater than or equal to 0.", new [] { "ExampleIndex" });
            }

            yield break;
        }
    }

}
