/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.
    /// </summary>
    [DataContract(Name = "EventTypeImportOpenApiIn")]
    public partial class EventTypeImportOpenApiIn : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventTypeImportOpenApiIn" /> class.
        /// </summary>
        /// <param name="dryRun">If &#x60;true&#x60;, return the event types that would be modified without actually modifying them. (default to false).</param>
        /// <param name="replaceAll">If &#x60;true&#x60;, all existing event types that are not in the spec will be archived. (default to false).</param>
        /// <param name="spec">A pre-parsed JSON spec..</param>
        /// <param name="specRaw">A string, parsed by the server as YAML or JSON..</param>
        public EventTypeImportOpenApiIn(bool dryRun = false, bool replaceAll = false, Object spec = default(Object), string specRaw = default(string))
        {
            this.DryRun = dryRun;
            this.ReplaceAll = replaceAll;
            this.Spec = spec;
            this.SpecRaw = specRaw;
        }

        /// <summary>
        /// If &#x60;true&#x60;, return the event types that would be modified without actually modifying them.
        /// </summary>
        /// <value>If &#x60;true&#x60;, return the event types that would be modified without actually modifying them.</value>
        [DataMember(Name = "dryRun", EmitDefaultValue = true)]
        public bool DryRun { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, all existing event types that are not in the spec will be archived.
        /// </summary>
        /// <value>If &#x60;true&#x60;, all existing event types that are not in the spec will be archived.</value>
        [DataMember(Name = "replaceAll", EmitDefaultValue = true)]
        public bool ReplaceAll { get; set; }

        /// <summary>
        /// A pre-parsed JSON spec.
        /// </summary>
        /// <value>A pre-parsed JSON spec.</value>
        /*
        <example>{&quot;info&quot;:{&quot;title&quot;:&quot;Webhook Example&quot;,&quot;version&quot;:&quot;1.0.0&quot;},&quot;openapi&quot;:&quot;3.1.0&quot;,&quot;webhooks&quot;:{&quot;pet.new&quot;:{&quot;post&quot;:{&quot;requestBody&quot;:{&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;properties&quot;:{&quot;id&quot;:{&quot;format&quot;:&quot;int64&quot;,&quot;type&quot;:&quot;integer&quot;},&quot;name&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;tag&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;id&quot;,&quot;name&quot;]}}},&quot;description&quot;:&quot;Information about a new pet in the system&quot;},&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;Return a 200 status to indicate that the data was received successfully&quot;}}}}}}</example>
        */
        [DataMember(Name = "spec", EmitDefaultValue = true)]
        public Object Spec { get; set; }

        /// <summary>
        /// A string, parsed by the server as YAML or JSON.
        /// </summary>
        /// <value>A string, parsed by the server as YAML or JSON.</value>
        /*
        <example>
# Both YAML and JSON are supported
openapi: 3.1.0
info:
  title: Webhook Example
  version: 1.0.0
# Since OAS 3.1.0 the paths element isn&#39;t necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components
webhooks:
  # Each webhook needs a name
  &quot;pet.new&quot;:
    # This is a Path Item Object, the only difference is that the request is initiated by the API provider
    post:
      requestBody:
        description: Information about a new pet in the system
        content:
          application/json:
            schema:
              $ref: &quot;#/components/schemas/Pet&quot;
      responses:
        &quot;200&quot;:
          description: Return a 200 status to indicate that the data was received successfully

components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
</example>
        */
        [DataMember(Name = "specRaw", EmitDefaultValue = true)]
        public string SpecRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventTypeImportOpenApiIn {\n");
            sb.Append("  DryRun: ").Append(DryRun).Append("\n");
            sb.Append("  ReplaceAll: ").Append(ReplaceAll).Append("\n");
            sb.Append("  Spec: ").Append(Spec).Append("\n");
            sb.Append("  SpecRaw: ").Append(SpecRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
