/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// InboundPathParams
    /// </summary>
    [DataContract(Name = "InboundPathParams")]
    public partial class InboundPathParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundPathParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundPathParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundPathParams" /> class.
        /// </summary>
        /// <param name="appId">The app&#39;s ID or UID (required).</param>
        /// <param name="inboundToken">inboundToken (required).</param>
        public InboundPathParams(string appId = default(string), string inboundToken = default(string))
        {
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new ArgumentNullException("appId is a required property for InboundPathParams and cannot be null");
            }
            this.AppId = appId;
            // to ensure "inboundToken" is required (not null)
            if (inboundToken == null)
            {
                throw new ArgumentNullException("inboundToken is a required property for InboundPathParams and cannot be null");
            }
            this.InboundToken = inboundToken;
        }

        /// <summary>
        /// The app&#39;s ID or UID
        /// </summary>
        /// <value>The app&#39;s ID or UID</value>
        /*
        <example>unique-app-identifier</example>
        */
        [DataMember(Name = "app_id", IsRequired = true, EmitDefaultValue = true)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets InboundToken
        /// </summary>
        [DataMember(Name = "inbound_token", IsRequired = true, EmitDefaultValue = true)]
        public string InboundToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboundPathParams {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  InboundToken: ").Append(InboundToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AppId (string) maxLength
            if (this.AppId != null && this.AppId.Length > 256)
            {
                yield return new ValidationResult("Invalid value for AppId, length must be less than 256.", new [] { "AppId" });
            }

            // AppId (string) minLength
            if (this.AppId != null && this.AppId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AppId, length must be greater than 1.", new [] { "AppId" });
            }

            if (this.AppId != null) {
                // AppId (string) pattern
                Regex regexAppId = new Regex(@"^[a-zA-Z0-9\-_.]+$", RegexOptions.CultureInvariant);
                if (!regexAppId.Match(this.AppId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppId, must match a pattern of " + regexAppId, new [] { "AppId" });
                }
            }

            yield break;
        }
    }

}
