/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// Sent after a message has been failing for a few times. It&#39;s sent on the fourth failure. It complements &#x60;message.attempt.exhausted&#x60; which is sent after the last failure.
    /// </summary>
    [DataContract(Name = "MessageAttemptFailingEvent")]
    public partial class MessageAttemptFailingEvent : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MessageAttemptFailing for value: message.attempt.failing
            /// </summary>
            [EnumMember(Value = "message.attempt.failing")]
            MessageAttemptFailing = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAttemptFailingEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageAttemptFailingEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAttemptFailingEvent" /> class.
        /// </summary>
        /// <param name="data">data (required).</param>
        /// <param name="type">type (required) (default to TypeEnum.MessageAttemptFailing).</param>
        public MessageAttemptFailingEvent(MessageAttemptFailingEventData data = default(MessageAttemptFailingEventData), TypeEnum type = TypeEnum.MessageAttemptFailing)
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for MessageAttemptFailingEvent and cannot be null");
            }
            this.Data = data;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public MessageAttemptFailingEventData Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageAttemptFailingEvent {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
