/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// MessageAttemptHeadersOut
    /// </summary>
    [DataContract(Name = "MessageAttemptHeadersOut")]
    public partial class MessageAttemptHeadersOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAttemptHeadersOut" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageAttemptHeadersOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAttemptHeadersOut" /> class.
        /// </summary>
        /// <param name="responseHeaders">responseHeaders.</param>
        /// <param name="sensitive">sensitive (required).</param>
        /// <param name="sentHeaders">sentHeaders (required).</param>
        public MessageAttemptHeadersOut(List<List<string>> responseHeaders = default(List<List<string>>), List<string> sensitive = default(List<string>), Dictionary<string, string> sentHeaders = default(Dictionary<string, string>))
        {
            // to ensure "sensitive" is required (not null)
            if (sensitive == null)
            {
                throw new ArgumentNullException("sensitive is a required property for MessageAttemptHeadersOut and cannot be null");
            }
            this.Sensitive = sensitive;
            // to ensure "sentHeaders" is required (not null)
            if (sentHeaders == null)
            {
                throw new ArgumentNullException("sentHeaders is a required property for MessageAttemptHeadersOut and cannot be null");
            }
            this.SentHeaders = sentHeaders;
            this.ResponseHeaders = responseHeaders;
        }

        /// <summary>
        /// Gets or Sets ResponseHeaders
        /// </summary>
        [DataMember(Name = "responseHeaders", EmitDefaultValue = true)]
        public List<List<string>> ResponseHeaders { get; set; }

        /// <summary>
        /// Gets or Sets Sensitive
        /// </summary>
        [DataMember(Name = "sensitive", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Sensitive { get; set; }

        /// <summary>
        /// Gets or Sets SentHeaders
        /// </summary>
        [DataMember(Name = "sentHeaders", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> SentHeaders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageAttemptHeadersOut {\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  Sensitive: ").Append(Sensitive).Append("\n");
            sb.Append("  SentHeaders: ").Append(SentHeaders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
