/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// MessageAttemptOut
    /// </summary>
    [DataContract(Name = "MessageAttemptOut")]
    public partial class MessageAttemptOut : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public MessageStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets TriggerType
        /// </summary>
        [DataMember(Name = "triggerType", IsRequired = true, EmitDefaultValue = true)]
        public MessageAttemptTriggerType TriggerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAttemptOut" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageAttemptOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAttemptOut" /> class.
        /// </summary>
        /// <param name="endpointId">The ep&#39;s ID (required).</param>
        /// <param name="id">The attempt&#39;s ID (required).</param>
        /// <param name="msg">msg.</param>
        /// <param name="msgId">The msg&#39;s ID (required).</param>
        /// <param name="response">response (required).</param>
        /// <param name="responseDurationMs">Response duration in milliseconds. (required).</param>
        /// <param name="responseStatusCode">responseStatusCode (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="triggerType">triggerType (required).</param>
        /// <param name="url">url (required).</param>
        public MessageAttemptOut(string endpointId = default(string), string id = default(string), MessageOut msg = default(MessageOut), string msgId = default(string), string response = default(string), long responseDurationMs = default(long), int responseStatusCode = default(int), MessageStatus status = default(MessageStatus), DateTime timestamp = default(DateTime), MessageAttemptTriggerType triggerType = default(MessageAttemptTriggerType), string url = default(string))
        {
            // to ensure "endpointId" is required (not null)
            if (endpointId == null)
            {
                throw new ArgumentNullException("endpointId is a required property for MessageAttemptOut and cannot be null");
            }
            this.EndpointId = endpointId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MessageAttemptOut and cannot be null");
            }
            this.Id = id;
            // to ensure "msgId" is required (not null)
            if (msgId == null)
            {
                throw new ArgumentNullException("msgId is a required property for MessageAttemptOut and cannot be null");
            }
            this.MsgId = msgId;
            // to ensure "response" is required (not null)
            if (response == null)
            {
                throw new ArgumentNullException("response is a required property for MessageAttemptOut and cannot be null");
            }
            this.Response = response;
            this.ResponseDurationMs = responseDurationMs;
            this.ResponseStatusCode = responseStatusCode;
            this.Status = status;
            this.Timestamp = timestamp;
            this.TriggerType = triggerType;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for MessageAttemptOut and cannot be null");
            }
            this.Url = url;
            this.Msg = msg;
        }

        /// <summary>
        /// The ep&#39;s ID
        /// </summary>
        /// <value>The ep&#39;s ID</value>
        /*
        <example>ep_1srOrx2ZWZBpBUvZwXKQmoEYga2</example>
        */
        [DataMember(Name = "endpointId", IsRequired = true, EmitDefaultValue = true)]
        public string EndpointId { get; set; }

        /// <summary>
        /// The attempt&#39;s ID
        /// </summary>
        /// <value>The attempt&#39;s ID</value>
        /*
        <example>atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name = "msg", EmitDefaultValue = false)]
        public MessageOut Msg { get; set; }

        /// <summary>
        /// The msg&#39;s ID
        /// </summary>
        /// <value>The msg&#39;s ID</value>
        /*
        <example>msg_1srOrx2ZWZBpBUvZwXKQmoEYga2</example>
        */
        [DataMember(Name = "msgId", IsRequired = true, EmitDefaultValue = true)]
        public string MsgId { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        /*
        <example>{}</example>
        */
        [DataMember(Name = "response", IsRequired = true, EmitDefaultValue = true)]
        public string Response { get; set; }

        /// <summary>
        /// Response duration in milliseconds.
        /// </summary>
        /// <value>Response duration in milliseconds.</value>
        [DataMember(Name = "responseDurationMs", IsRequired = true, EmitDefaultValue = true)]
        public long ResponseDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets ResponseStatusCode
        /// </summary>
        /*
        <example>200</example>
        */
        [DataMember(Name = "responseStatusCode", IsRequired = true, EmitDefaultValue = true)]
        public int ResponseStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /*
        <example>https://example.com/webhook/</example>
        */
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageAttemptOut {\n");
            sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  MsgId: ").Append(MsgId).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  ResponseDurationMs: ").Append(ResponseDurationMs).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 65536)
            {
                yield return new ValidationResult("Invalid value for Url, length must be less than 65536.", new [] { "Url" });
            }

            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            yield break;
        }
    }

}
