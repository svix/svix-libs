/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// SinkInOneOf
    /// </summary>
    [DataContract(Name = "SinkIn_oneOf")]
    public partial class SinkInOneOf : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum RabbitMQ for value: rabbitMQ
            /// </summary>
            [EnumMember(Value = "rabbitMQ")]
            RabbitMQ = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinkInOneOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SinkInOneOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinkInOneOf" /> class.
        /// </summary>
        /// <param name="routingKey">routingKey (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="uri">uri (required).</param>
        public SinkInOneOf(string routingKey = default(string), TypeEnum type = default(TypeEnum), string uri = default(string))
        {
            // to ensure "routingKey" is required (not null)
            if (routingKey == null)
            {
                throw new ArgumentNullException("routingKey is a required property for SinkInOneOf and cannot be null");
            }
            this.RoutingKey = routingKey;
            this.Type = type;
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for SinkInOneOf and cannot be null");
            }
            this.Uri = uri;
        }

        /// <summary>
        /// Gets or Sets RoutingKey
        /// </summary>
        [DataMember(Name = "routingKey", IsRequired = true, EmitDefaultValue = true)]
        public string RoutingKey { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SinkInOneOf {\n");
            sb.Append("  RoutingKey: ").Append(RoutingKey).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
