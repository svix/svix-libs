/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// SinkInOneOf2
    /// </summary>
    [DataContract(Name = "SinkIn_oneOf_2")]
    public partial class SinkInOneOf2 : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SecurityProtocol
        /// </summary>
        [DataMember(Name = "securityProtocol", IsRequired = true, EmitDefaultValue = true)]
        public KafkaSecurityProtocolType SecurityProtocol { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Kafka for value: kafka
            /// </summary>
            [EnumMember(Value = "kafka")]
            Kafka = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinkInOneOf2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SinkInOneOf2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinkInOneOf2" /> class.
        /// </summary>
        /// <param name="brokers">brokers (required).</param>
        /// <param name="saslPassword">Password for SASL, if &#x60;security_protocol&#x60; is &#x60;sasl-ssl&#x60;..</param>
        /// <param name="saslUsername">Username for SASL, if &#x60;security_protocol&#x60; is &#x60;sasl-ssl&#x60;..</param>
        /// <param name="securityProtocol">securityProtocol (required).</param>
        /// <param name="topic">topic (required).</param>
        /// <param name="type">type (required).</param>
        public SinkInOneOf2(string brokers = default(string), string saslPassword = default(string), string saslUsername = default(string), KafkaSecurityProtocolType securityProtocol = default(KafkaSecurityProtocolType), string topic = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "brokers" is required (not null)
            if (brokers == null)
            {
                throw new ArgumentNullException("brokers is a required property for SinkInOneOf2 and cannot be null");
            }
            this.Brokers = brokers;
            this.SecurityProtocol = securityProtocol;
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new ArgumentNullException("topic is a required property for SinkInOneOf2 and cannot be null");
            }
            this.Topic = topic;
            this.Type = type;
            this.SaslPassword = saslPassword;
            this.SaslUsername = saslUsername;
        }

        /// <summary>
        /// Gets or Sets Brokers
        /// </summary>
        [DataMember(Name = "brokers", IsRequired = true, EmitDefaultValue = true)]
        public string Brokers { get; set; }

        /// <summary>
        /// Password for SASL, if &#x60;security_protocol&#x60; is &#x60;sasl-ssl&#x60;.
        /// </summary>
        /// <value>Password for SASL, if &#x60;security_protocol&#x60; is &#x60;sasl-ssl&#x60;.</value>
        [DataMember(Name = "saslPassword", EmitDefaultValue = true)]
        public string SaslPassword { get; set; }

        /// <summary>
        /// Username for SASL, if &#x60;security_protocol&#x60; is &#x60;sasl-ssl&#x60;.
        /// </summary>
        /// <value>Username for SASL, if &#x60;security_protocol&#x60; is &#x60;sasl-ssl&#x60;.</value>
        [DataMember(Name = "saslUsername", EmitDefaultValue = true)]
        public string SaslUsername { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", IsRequired = true, EmitDefaultValue = true)]
        public string Topic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SinkInOneOf2 {\n");
            sb.Append("  Brokers: ").Append(Brokers).Append("\n");
            sb.Append("  SaslPassword: ").Append(SaslPassword).Append("\n");
            sb.Append("  SaslUsername: ").Append(SaslUsername).Append("\n");
            sb.Append("  SecurityProtocol: ").Append(SecurityProtocol).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
