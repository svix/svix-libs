/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// Configuration parameters for defining a Snowflake sink.
    /// </summary>
    [DataContract(Name = "SnowflakeConfig")]
    public partial class SnowflakeConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SnowflakeConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SnowflakeConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SnowflakeConfig" /> class.
        /// </summary>
        /// <param name="accountIdentifier">Snowflake account identifier, which includes both the organization and account IDs separated by a hyphen. (required).</param>
        /// <param name="dbName">Database name.  Only required if not using transformations..</param>
        /// <param name="privateKey">PEM-encoded private key used for signing token-based requests to the Snowflake API.  Beginning/end delimiters are not required. (required).</param>
        /// <param name="schemaName">Schema name.  Only required if not using transformations..</param>
        /// <param name="tableName">Table name.  Only required if not using transformations..</param>
        /// <param name="userId">The Snowflake user id. (required).</param>
        public SnowflakeConfig(string accountIdentifier = default(string), string dbName = default(string), string privateKey = default(string), string schemaName = default(string), string tableName = default(string), string userId = default(string))
        {
            // to ensure "accountIdentifier" is required (not null)
            if (accountIdentifier == null)
            {
                throw new ArgumentNullException("accountIdentifier is a required property for SnowflakeConfig and cannot be null");
            }
            this.AccountIdentifier = accountIdentifier;
            // to ensure "privateKey" is required (not null)
            if (privateKey == null)
            {
                throw new ArgumentNullException("privateKey is a required property for SnowflakeConfig and cannot be null");
            }
            this.PrivateKey = privateKey;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for SnowflakeConfig and cannot be null");
            }
            this.UserId = userId;
            this.DbName = dbName;
            this.SchemaName = schemaName;
            this.TableName = tableName;
        }

        /// <summary>
        /// Snowflake account identifier, which includes both the organization and account IDs separated by a hyphen.
        /// </summary>
        /// <value>Snowflake account identifier, which includes both the organization and account IDs separated by a hyphen.</value>
        [DataMember(Name = "accountIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// Database name.  Only required if not using transformations.
        /// </summary>
        /// <value>Database name.  Only required if not using transformations.</value>
        [DataMember(Name = "dbName", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// PEM-encoded private key used for signing token-based requests to the Snowflake API.  Beginning/end delimiters are not required.
        /// </summary>
        /// <value>PEM-encoded private key used for signing token-based requests to the Snowflake API.  Beginning/end delimiters are not required.</value>
        [DataMember(Name = "privateKey", IsRequired = true, EmitDefaultValue = true)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Schema name.  Only required if not using transformations.
        /// </summary>
        /// <value>Schema name.  Only required if not using transformations.</value>
        [DataMember(Name = "schemaName", EmitDefaultValue = false)]
        public string SchemaName { get; set; }

        /// <summary>
        /// Table name.  Only required if not using transformations.
        /// </summary>
        /// <value>Table name.  Only required if not using transformations.</value>
        [DataMember(Name = "tableName", EmitDefaultValue = false)]
        public string TableName { get; set; }

        /// <summary>
        /// The Snowflake user id.
        /// </summary>
        /// <value>The Snowflake user id.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SnowflakeConfig {\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
