/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// StreamIn
    /// </summary>
    [DataContract(Name = "StreamIn")]
    public partial class StreamIn : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamIn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreamIn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamIn" /> class.
        /// </summary>
        /// <param name="description">The stream&#39;s description. (required).</param>
        /// <param name="uid">The Stream&#39;s UID..</param>
        public StreamIn(string description = default(string), string uid = default(string))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for StreamIn and cannot be null");
            }
            this.Description = description;
            this.Uid = uid;
        }

        /// <summary>
        /// The stream&#39;s description.
        /// </summary>
        /// <value>The stream&#39;s description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The Stream&#39;s UID.
        /// </summary>
        /// <value>The Stream&#39;s UID.</value>
        /*
        <example>unique-identifier</example>
        */
        [DataMember(Name = "uid", EmitDefaultValue = false)]
        public string Uid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamIn {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Uid (string) maxLength
            if (this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            // Uid (string) minLength
            if (this.Uid != null && this.Uid.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be greater than 1.", new [] { "Uid" });
            }

            if (this.Uid != null) {
                // Uid (string) pattern
                Regex regexUid = new Regex(@"^(?!strm_)[a-zA-Z0-9_-]+$", RegexOptions.CultureInvariant);
                if (!regexUid.Match(this.Uid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Uid, must match a pattern of " + regexUid, new [] { "Uid" });
                }
            }

            yield break;
        }
    }

}
