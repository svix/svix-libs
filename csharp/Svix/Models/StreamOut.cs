/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// StreamOut
    /// </summary>
    [DataContract(Name = "StreamOut")]
    public partial class StreamOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamOut" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreamOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamOut" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="description">The stream&#39;s description..</param>
        /// <param name="id">The stream&#39;s ID. (required).</param>
        /// <param name="uid">The Stream&#39;s UID..</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public StreamOut(DateTime createdAt = default(DateTime), string description = default(string), string id = default(string), string uid = default(string), DateTime updatedAt = default(DateTime))
        {
            this.CreatedAt = createdAt;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for StreamOut and cannot be null");
            }
            this.Id = id;
            this.UpdatedAt = updatedAt;
            this.Description = description;
            this.Uid = uid;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The stream&#39;s description.
        /// </summary>
        /// <value>The stream&#39;s description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The stream&#39;s ID.
        /// </summary>
        /// <value>The stream&#39;s ID.</value>
        /*
        <example>strm_2yZwUhtgs5Ai8T9yRQJXA</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Stream&#39;s UID.
        /// </summary>
        /// <value>The Stream&#39;s UID.</value>
        /*
        <example>unique-identifier</example>
        */
        [DataMember(Name = "uid", EmitDefaultValue = false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamOut {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 27)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 27.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 27)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 27.", new [] { "Id" });
            }

            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^strm_[A-Za-z0-9]{22}$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            // Uid (string) maxLength
            if (this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            // Uid (string) minLength
            if (this.Uid != null && this.Uid.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be greater than 1.", new [] { "Uid" });
            }

            if (this.Uid != null) {
                // Uid (string) pattern
                Regex regexUid = new Regex(@"^(?!strm_)[a-zA-Z0-9_-]+$", RegexOptions.CultureInvariant);
                if (!regexUid.Match(this.Uid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Uid, must match a pattern of " + regexUid, new [] { "Uid" });
                }
            }

            yield break;
        }
    }

}
