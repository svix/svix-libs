/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Svix.Model
{
    /// <summary>
    /// StreamSinkOut
    /// </summary>
    [JsonConverter(typeof(StreamSinkOutJsonConverter))]
    [DataContract(Name = "StreamSinkOut")]
    public partial class StreamSinkOut : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf.</param>
        public StreamSinkOut(StreamSinkInOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf1.</param>
        public StreamSinkOut(StreamSinkInOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf2.</param>
        public StreamSinkOut(StreamSinkInOneOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf3" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf3.</param>
        public StreamSinkOut(StreamSinkInOneOf3 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf4.</param>
        public StreamSinkOut(StreamSinkInOneOf4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf5" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf5.</param>
        public StreamSinkOut(StreamSinkInOneOf5 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf6" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf6.</param>
        public StreamSinkOut(StreamSinkInOneOf6 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSinkOut" /> class
        /// with the <see cref="StreamSinkInOneOf7" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StreamSinkInOneOf7.</param>
        public StreamSinkOut(StreamSinkInOneOf7 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(StreamSinkInOneOf) || value is StreamSinkInOneOf)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf1) || value is StreamSinkInOneOf1)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf2) || value is StreamSinkInOneOf2)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf3) || value is StreamSinkInOneOf3)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf4) || value is StreamSinkInOneOf4)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf5) || value is StreamSinkInOneOf5)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf6) || value is StreamSinkInOneOf6)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StreamSinkInOneOf7) || value is StreamSinkInOneOf7)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: StreamSinkInOneOf, StreamSinkInOneOf1, StreamSinkInOneOf2, StreamSinkInOneOf3, StreamSinkInOneOf4, StreamSinkInOneOf5, StreamSinkInOneOf6, StreamSinkInOneOf7");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf`. If the actual instance is not `StreamSinkInOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf</returns>
        public StreamSinkInOneOf GetStreamSinkInOneOf()
        {
            return (StreamSinkInOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf1`. If the actual instance is not `StreamSinkInOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf1</returns>
        public StreamSinkInOneOf1 GetStreamSinkInOneOf1()
        {
            return (StreamSinkInOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf2`. If the actual instance is not `StreamSinkInOneOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf2</returns>
        public StreamSinkInOneOf2 GetStreamSinkInOneOf2()
        {
            return (StreamSinkInOneOf2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf3`. If the actual instance is not `StreamSinkInOneOf3`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf3</returns>
        public StreamSinkInOneOf3 GetStreamSinkInOneOf3()
        {
            return (StreamSinkInOneOf3)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf4`. If the actual instance is not `StreamSinkInOneOf4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf4</returns>
        public StreamSinkInOneOf4 GetStreamSinkInOneOf4()
        {
            return (StreamSinkInOneOf4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf5`. If the actual instance is not `StreamSinkInOneOf5`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf5</returns>
        public StreamSinkInOneOf5 GetStreamSinkInOneOf5()
        {
            return (StreamSinkInOneOf5)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf6`. If the actual instance is not `StreamSinkInOneOf6`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf6</returns>
        public StreamSinkInOneOf6 GetStreamSinkInOneOf6()
        {
            return (StreamSinkInOneOf6)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StreamSinkInOneOf7`. If the actual instance is not `StreamSinkInOneOf7`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StreamSinkInOneOf7</returns>
        public StreamSinkInOneOf7 GetStreamSinkInOneOf7()
        {
            return (StreamSinkInOneOf7)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamSinkOut {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, StreamSinkOut.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of StreamSinkOut
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of StreamSinkOut</returns>
        public static StreamSinkOut FromJson(string jsonString)
        {
            StreamSinkOut newStreamSinkOut = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newStreamSinkOut;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf1>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf1>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf2).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf2>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf2>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf3).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf3>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf3>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf3");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf3: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf4).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf4>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf4>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf5).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf5>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf5>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf5");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf5: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf6).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf6>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf6>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf6");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf6: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StreamSinkInOneOf7).GetProperty("AdditionalProperties") == null)
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf7>(jsonString, StreamSinkOut.SerializerSettings));
                }
                else
                {
                    newStreamSinkOut = new StreamSinkOut(JsonConvert.DeserializeObject<StreamSinkInOneOf7>(jsonString, StreamSinkOut.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StreamSinkInOneOf7");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StreamSinkInOneOf7: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newStreamSinkOut;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for StreamSinkOut
    /// </summary>
    public class StreamSinkOutJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(StreamSinkOut).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return StreamSinkOut.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return StreamSinkOut.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
