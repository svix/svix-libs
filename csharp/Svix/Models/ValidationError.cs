/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Svix.Client.FileParameter;
using OpenAPIDateConverter = Svix.Client.OpenAPIDateConverter;

namespace Svix.Model
{
    /// <summary>
    /// Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.
    /// </summary>
    [DataContract(Name = "ValidationError")]
    public partial class ValidationError : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidationError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationError" /> class.
        /// </summary>
        /// <param name="loc">The location as a [&#x60;Vec&#x60;] of [&#x60;String&#x60;]s - - often in the form &#x60;[\&quot;body\&quot;, \&quot;field_name\&quot;]&#x60;, &#x60;[\&quot;query\&quot;, \&quot;field_name\&quot;]&#x60;, etc. They may, however, be arbitrarily deep. (required).</param>
        /// <param name="msg">The message accompanying the validation error item. (required).</param>
        /// <param name="type">The type of error, often \&quot;type_error\&quot; or \&quot;value_error\&quot;, but sometimes with more context like as \&quot;value_error.number.not_ge\&quot; (required).</param>
        public ValidationError(List<string> loc = default(List<string>), string msg = default(string), string type = default(string))
        {
            // to ensure "loc" is required (not null)
            if (loc == null)
            {
                throw new ArgumentNullException("loc is a required property for ValidationError and cannot be null");
            }
            this.Loc = loc;
            // to ensure "msg" is required (not null)
            if (msg == null)
            {
                throw new ArgumentNullException("msg is a required property for ValidationError and cannot be null");
            }
            this.Msg = msg;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ValidationError and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// The location as a [&#x60;Vec&#x60;] of [&#x60;String&#x60;]s - - often in the form &#x60;[\&quot;body\&quot;, \&quot;field_name\&quot;]&#x60;, &#x60;[\&quot;query\&quot;, \&quot;field_name\&quot;]&#x60;, etc. They may, however, be arbitrarily deep.
        /// </summary>
        /// <value>The location as a [&#x60;Vec&#x60;] of [&#x60;String&#x60;]s - - often in the form &#x60;[\&quot;body\&quot;, \&quot;field_name\&quot;]&#x60;, &#x60;[\&quot;query\&quot;, \&quot;field_name\&quot;]&#x60;, etc. They may, however, be arbitrarily deep.</value>
        [DataMember(Name = "loc", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Loc { get; set; }

        /// <summary>
        /// The message accompanying the validation error item.
        /// </summary>
        /// <value>The message accompanying the validation error item.</value>
        [DataMember(Name = "msg", IsRequired = true, EmitDefaultValue = true)]
        public string Msg { get; set; }

        /// <summary>
        /// The type of error, often \&quot;type_error\&quot; or \&quot;value_error\&quot;, but sometimes with more context like as \&quot;value_error.number.not_ge\&quot;
        /// </summary>
        /// <value>The type of error, often \&quot;type_error\&quot; or \&quot;value_error\&quot;, but sometimes with more context like as \&quot;value_error.number.not_ge\&quot;</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationError {\n");
            sb.Append("  Loc: ").Append(Loc).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
