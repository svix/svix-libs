/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AzureBlobStorageConfig struct for AzureBlobStorageConfig
type AzureBlobStorageConfig struct {
	AccessKey string `json:"accessKey"`
	Account string `json:"account"`
	Container string `json:"container"`
}

// NewAzureBlobStorageConfig instantiates a new AzureBlobStorageConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureBlobStorageConfig(accessKey string, account string, container string) *AzureBlobStorageConfig {
	this := AzureBlobStorageConfig{}
	this.AccessKey = accessKey
	this.Account = account
	this.Container = container
	return &this
}

// NewAzureBlobStorageConfigWithDefaults instantiates a new AzureBlobStorageConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureBlobStorageConfigWithDefaults() *AzureBlobStorageConfig {
	this := AzureBlobStorageConfig{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *AzureBlobStorageConfig) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageConfig) GetAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *AzureBlobStorageConfig) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetAccount returns the Account field value
func (o *AzureBlobStorageConfig) GetAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageConfig) GetAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *AzureBlobStorageConfig) SetAccount(v string) {
	o.Account = v
}

// GetContainer returns the Container field value
func (o *AzureBlobStorageConfig) GetContainer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Container
}

// GetContainerOk returns a tuple with the Container field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageConfig) GetContainerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Container, true
}

// SetContainer sets field value
func (o *AzureBlobStorageConfig) SetContainer(v string) {
	o.Container = v
}

func (o AzureBlobStorageConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accessKey"] = o.AccessKey
	}
	if true {
		toSerialize["account"] = o.Account
	}
	if true {
		toSerialize["container"] = o.Container
	}
	return json.Marshal(toSerialize)
}

type NullableAzureBlobStorageConfig struct {
	value *AzureBlobStorageConfig
	isSet bool
}

func (v NullableAzureBlobStorageConfig) Get() *AzureBlobStorageConfig {
	return v.value
}

func (v *NullableAzureBlobStorageConfig) Set(val *AzureBlobStorageConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureBlobStorageConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureBlobStorageConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureBlobStorageConfig(val *AzureBlobStorageConfig) *NullableAzureBlobStorageConfig {
	return &NullableAzureBlobStorageConfig{value: val, isSet: true}
}

func (v NullableAzureBlobStorageConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureBlobStorageConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


