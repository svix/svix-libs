/*
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * API version: 1.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnvironmentSettingsOut struct for EnvironmentSettingsOut
type EnvironmentSettingsOut struct {
	CustomColor *string `json:"customColor,omitempty"`
	CustomLogoUrl *string `json:"customLogoUrl,omitempty"`
	CustomFontFamily *string `json:"customFontFamily,omitempty"`
	CustomThemeOverride *CustomThemeOverride `json:"customThemeOverride,omitempty"`
	EnableChannels *bool `json:"enableChannels,omitempty"`
	EnableIntegrationManagement *bool `json:"enableIntegrationManagement,omitempty"`
}

// NewEnvironmentSettingsOut instantiates a new EnvironmentSettingsOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentSettingsOut() *EnvironmentSettingsOut {
	this := EnvironmentSettingsOut{}
	var enableChannels bool = false
	this.EnableChannels = &enableChannels
	var enableIntegrationManagement bool = false
	this.EnableIntegrationManagement = &enableIntegrationManagement
	return &this
}

// NewEnvironmentSettingsOutWithDefaults instantiates a new EnvironmentSettingsOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentSettingsOutWithDefaults() *EnvironmentSettingsOut {
	this := EnvironmentSettingsOut{}
	var enableChannels bool = false
	this.EnableChannels = &enableChannels
	var enableIntegrationManagement bool = false
	this.EnableIntegrationManagement = &enableIntegrationManagement
	return &this
}

// GetCustomColor returns the CustomColor field value if set, zero value otherwise.
func (o *EnvironmentSettingsOut) GetCustomColor() string {
	if o == nil || o.CustomColor == nil {
		var ret string
		return ret
	}
	return *o.CustomColor
}

// GetCustomColorOk returns a tuple with the CustomColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSettingsOut) GetCustomColorOk() (*string, bool) {
	if o == nil || o.CustomColor == nil {
		return nil, false
	}
	return o.CustomColor, true
}

// HasCustomColor returns a boolean if a field has been set.
func (o *EnvironmentSettingsOut) HasCustomColor() bool {
	if o != nil && o.CustomColor != nil {
		return true
	}

	return false
}

// SetCustomColor gets a reference to the given string and assigns it to the CustomColor field.
func (o *EnvironmentSettingsOut) SetCustomColor(v string) {
	o.CustomColor = &v
}

// GetCustomLogoUrl returns the CustomLogoUrl field value if set, zero value otherwise.
func (o *EnvironmentSettingsOut) GetCustomLogoUrl() string {
	if o == nil || o.CustomLogoUrl == nil {
		var ret string
		return ret
	}
	return *o.CustomLogoUrl
}

// GetCustomLogoUrlOk returns a tuple with the CustomLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSettingsOut) GetCustomLogoUrlOk() (*string, bool) {
	if o == nil || o.CustomLogoUrl == nil {
		return nil, false
	}
	return o.CustomLogoUrl, true
}

// HasCustomLogoUrl returns a boolean if a field has been set.
func (o *EnvironmentSettingsOut) HasCustomLogoUrl() bool {
	if o != nil && o.CustomLogoUrl != nil {
		return true
	}

	return false
}

// SetCustomLogoUrl gets a reference to the given string and assigns it to the CustomLogoUrl field.
func (o *EnvironmentSettingsOut) SetCustomLogoUrl(v string) {
	o.CustomLogoUrl = &v
}

// GetCustomFontFamily returns the CustomFontFamily field value if set, zero value otherwise.
func (o *EnvironmentSettingsOut) GetCustomFontFamily() string {
	if o == nil || o.CustomFontFamily == nil {
		var ret string
		return ret
	}
	return *o.CustomFontFamily
}

// GetCustomFontFamilyOk returns a tuple with the CustomFontFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSettingsOut) GetCustomFontFamilyOk() (*string, bool) {
	if o == nil || o.CustomFontFamily == nil {
		return nil, false
	}
	return o.CustomFontFamily, true
}

// HasCustomFontFamily returns a boolean if a field has been set.
func (o *EnvironmentSettingsOut) HasCustomFontFamily() bool {
	if o != nil && o.CustomFontFamily != nil {
		return true
	}

	return false
}

// SetCustomFontFamily gets a reference to the given string and assigns it to the CustomFontFamily field.
func (o *EnvironmentSettingsOut) SetCustomFontFamily(v string) {
	o.CustomFontFamily = &v
}

// GetCustomThemeOverride returns the CustomThemeOverride field value if set, zero value otherwise.
func (o *EnvironmentSettingsOut) GetCustomThemeOverride() CustomThemeOverride {
	if o == nil || o.CustomThemeOverride == nil {
		var ret CustomThemeOverride
		return ret
	}
	return *o.CustomThemeOverride
}

// GetCustomThemeOverrideOk returns a tuple with the CustomThemeOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSettingsOut) GetCustomThemeOverrideOk() (*CustomThemeOverride, bool) {
	if o == nil || o.CustomThemeOverride == nil {
		return nil, false
	}
	return o.CustomThemeOverride, true
}

// HasCustomThemeOverride returns a boolean if a field has been set.
func (o *EnvironmentSettingsOut) HasCustomThemeOverride() bool {
	if o != nil && o.CustomThemeOverride != nil {
		return true
	}

	return false
}

// SetCustomThemeOverride gets a reference to the given CustomThemeOverride and assigns it to the CustomThemeOverride field.
func (o *EnvironmentSettingsOut) SetCustomThemeOverride(v CustomThemeOverride) {
	o.CustomThemeOverride = &v
}

// GetEnableChannels returns the EnableChannels field value if set, zero value otherwise.
func (o *EnvironmentSettingsOut) GetEnableChannels() bool {
	if o == nil || o.EnableChannels == nil {
		var ret bool
		return ret
	}
	return *o.EnableChannels
}

// GetEnableChannelsOk returns a tuple with the EnableChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSettingsOut) GetEnableChannelsOk() (*bool, bool) {
	if o == nil || o.EnableChannels == nil {
		return nil, false
	}
	return o.EnableChannels, true
}

// HasEnableChannels returns a boolean if a field has been set.
func (o *EnvironmentSettingsOut) HasEnableChannels() bool {
	if o != nil && o.EnableChannels != nil {
		return true
	}

	return false
}

// SetEnableChannels gets a reference to the given bool and assigns it to the EnableChannels field.
func (o *EnvironmentSettingsOut) SetEnableChannels(v bool) {
	o.EnableChannels = &v
}

// GetEnableIntegrationManagement returns the EnableIntegrationManagement field value if set, zero value otherwise.
func (o *EnvironmentSettingsOut) GetEnableIntegrationManagement() bool {
	if o == nil || o.EnableIntegrationManagement == nil {
		var ret bool
		return ret
	}
	return *o.EnableIntegrationManagement
}

// GetEnableIntegrationManagementOk returns a tuple with the EnableIntegrationManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSettingsOut) GetEnableIntegrationManagementOk() (*bool, bool) {
	if o == nil || o.EnableIntegrationManagement == nil {
		return nil, false
	}
	return o.EnableIntegrationManagement, true
}

// HasEnableIntegrationManagement returns a boolean if a field has been set.
func (o *EnvironmentSettingsOut) HasEnableIntegrationManagement() bool {
	if o != nil && o.EnableIntegrationManagement != nil {
		return true
	}

	return false
}

// SetEnableIntegrationManagement gets a reference to the given bool and assigns it to the EnableIntegrationManagement field.
func (o *EnvironmentSettingsOut) SetEnableIntegrationManagement(v bool) {
	o.EnableIntegrationManagement = &v
}

func (o EnvironmentSettingsOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomColor != nil {
		toSerialize["customColor"] = o.CustomColor
	}
	if o.CustomLogoUrl != nil {
		toSerialize["customLogoUrl"] = o.CustomLogoUrl
	}
	if o.CustomFontFamily != nil {
		toSerialize["customFontFamily"] = o.CustomFontFamily
	}
	if o.CustomThemeOverride != nil {
		toSerialize["customThemeOverride"] = o.CustomThemeOverride
	}
	if o.EnableChannels != nil {
		toSerialize["enableChannels"] = o.EnableChannels
	}
	if o.EnableIntegrationManagement != nil {
		toSerialize["enableIntegrationManagement"] = o.EnableIntegrationManagement
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentSettingsOut struct {
	value *EnvironmentSettingsOut
	isSet bool
}

func (v NullableEnvironmentSettingsOut) Get() *EnvironmentSettingsOut {
	return v.value
}

func (v *NullableEnvironmentSettingsOut) Set(val *EnvironmentSettingsOut) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentSettingsOut) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentSettingsOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentSettingsOut(val *EnvironmentSettingsOut) *NullableEnvironmentSettingsOut {
	return &NullableEnvironmentSettingsOut{value: val, isSet: true}
}

func (v NullableEnvironmentSettingsOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentSettingsOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


