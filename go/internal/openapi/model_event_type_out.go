/*
 * Svix
 *
 * The Svix server API documentation
 *
 * API version: 1.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventTypeOut struct for EventTypeOut
type EventTypeOut struct {
	Description string `json:"description"`
	Name string `json:"name"`
}

// NewEventTypeOut instantiates a new EventTypeOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeOut(description string, name string, ) *EventTypeOut {
	this := EventTypeOut{}
	this.Description = description
	this.Name = name
	return &this
}

// NewEventTypeOutWithDefaults instantiates a new EventTypeOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeOutWithDefaults() *EventTypeOut {
	this := EventTypeOut{}
	return &this
}

// GetDescription returns the Description field value
func (o *EventTypeOut) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EventTypeOut) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EventTypeOut) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *EventTypeOut) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventTypeOut) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventTypeOut) SetName(v string) {
	o.Name = v
}

func (o EventTypeOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableEventTypeOut struct {
	value *EventTypeOut
	isSet bool
}

func (v NullableEventTypeOut) Get() *EventTypeOut {
	return v.value
}

func (v *NullableEventTypeOut) Set(val *EventTypeOut) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeOut) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeOut(val *EventTypeOut) *NullableEventTypeOut {
	return &NullableEventTypeOut{value: val, isSet: true}
}

func (v NullableEventTypeOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


