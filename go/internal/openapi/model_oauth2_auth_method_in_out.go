/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Oauth2AuthMethodInOut The method used for authenticating to the OAuth authorization server.  `clientSecretJwt` will construct a JWT used for authentication with the oauth authorization server. This method is less commonly used and may not be supported by all oauth providers. `clientSecretBasic` will authenticate to the oauth authorization server using an `Authorization` header with the client secret as the value. This is the most common means of authentication. `clientSecretPost` will authenticate to the oauth authorization server by passing the client secret in a `client_secret` field in the request body. This method may not be supported by all oauth providers, and in general `clientSecretBasic` should be preferred.
type Oauth2AuthMethodInOut string

// List of Oauth2AuthMethodInOut
const (
	OAUTH2AUTHMETHODINOUT_CLIENT_SECRET_JWT Oauth2AuthMethodInOut = "clientSecretJwt"
	OAUTH2AUTHMETHODINOUT_CLIENT_SECRET_BASIC Oauth2AuthMethodInOut = "clientSecretBasic"
	OAUTH2AUTHMETHODINOUT_CLIENT_SECRET_POST Oauth2AuthMethodInOut = "clientSecretPost"
)

// All allowed values of Oauth2AuthMethodInOut enum
var AllowedOauth2AuthMethodInOutEnumValues = []Oauth2AuthMethodInOut{
	"clientSecretJwt",
	"clientSecretBasic",
	"clientSecretPost",
}

func (v *Oauth2AuthMethodInOut) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Oauth2AuthMethodInOut(value)
	for _, existing := range AllowedOauth2AuthMethodInOutEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Oauth2AuthMethodInOut", value)
}

// NewOauth2AuthMethodInOutFromValue returns a pointer to a valid Oauth2AuthMethodInOut
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOauth2AuthMethodInOutFromValue(v string) (*Oauth2AuthMethodInOut, error) {
	ev := Oauth2AuthMethodInOut(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Oauth2AuthMethodInOut: valid values are %v", v, AllowedOauth2AuthMethodInOutEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Oauth2AuthMethodInOut) IsValid() bool {
	for _, existing := range AllowedOauth2AuthMethodInOutEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Oauth2AuthMethodInOut value
func (v Oauth2AuthMethodInOut) Ptr() *Oauth2AuthMethodInOut {
	return &v
}

type NullableOauth2AuthMethodInOut struct {
	value *Oauth2AuthMethodInOut
	isSet bool
}

func (v NullableOauth2AuthMethodInOut) Get() *Oauth2AuthMethodInOut {
	return v.value
}

func (v *NullableOauth2AuthMethodInOut) Set(val *Oauth2AuthMethodInOut) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2AuthMethodInOut) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2AuthMethodInOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2AuthMethodInOut(val *Oauth2AuthMethodInOut) *NullableOauth2AuthMethodInOut {
	return &NullableOauth2AuthMethodInOut{value: val, isSet: true}
}

func (v NullableOauth2AuthMethodInOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2AuthMethodInOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

