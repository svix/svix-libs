/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// S3Config struct for S3Config
type S3Config struct {
	AccessKeyId string `json:"accessKeyId"`
	Bucket string `json:"bucket"`
	Region string `json:"region"`
	SecretAccessKey string `json:"secretAccessKey"`
}

// NewS3Config instantiates a new S3Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Config(accessKeyId string, bucket string, region string, secretAccessKey string) *S3Config {
	this := S3Config{}
	this.AccessKeyId = accessKeyId
	this.Bucket = bucket
	this.Region = region
	this.SecretAccessKey = secretAccessKey
	return &this
}

// NewS3ConfigWithDefaults instantiates a new S3Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ConfigWithDefaults() *S3Config {
	this := S3Config{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value
func (o *S3Config) GetAccessKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
func (o *S3Config) GetAccessKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessKeyId, true
}

// SetAccessKeyId sets field value
func (o *S3Config) SetAccessKeyId(v string) {
	o.AccessKeyId = v
}

// GetBucket returns the Bucket field value
func (o *S3Config) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *S3Config) GetBucketOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *S3Config) SetBucket(v string) {
	o.Bucket = v
}

// GetRegion returns the Region field value
func (o *S3Config) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *S3Config) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *S3Config) SetRegion(v string) {
	o.Region = v
}

// GetSecretAccessKey returns the SecretAccessKey field value
func (o *S3Config) GetSecretAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value
// and a boolean to check if the value has been set.
func (o *S3Config) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SecretAccessKey, true
}

// SetSecretAccessKey sets field value
func (o *S3Config) SetSecretAccessKey(v string) {
	o.SecretAccessKey = v
}

func (o S3Config) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accessKeyId"] = o.AccessKeyId
	}
	if true {
		toSerialize["bucket"] = o.Bucket
	}
	if true {
		toSerialize["region"] = o.Region
	}
	if true {
		toSerialize["secretAccessKey"] = o.SecretAccessKey
	}
	return json.Marshal(toSerialize)
}

type NullableS3Config struct {
	value *S3Config
	isSet bool
}

func (v NullableS3Config) Get() *S3Config {
	return v.value
}

func (v *NullableS3Config) Set(val *S3Config) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Config) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Config(val *S3Config) *NullableS3Config {
	return &NullableS3Config{value: val, isSet: true}
}

func (v NullableS3Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


