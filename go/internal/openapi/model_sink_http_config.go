/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SinkHttpConfig struct for SinkHttpConfig
type SinkHttpConfig struct {
	Url string `json:"url"`
}

// NewSinkHttpConfig instantiates a new SinkHttpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinkHttpConfig(url string) *SinkHttpConfig {
	this := SinkHttpConfig{}
	this.Url = url
	return &this
}

// NewSinkHttpConfigWithDefaults instantiates a new SinkHttpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinkHttpConfigWithDefaults() *SinkHttpConfig {
	this := SinkHttpConfig{}
	return &this
}

// GetUrl returns the Url field value
func (o *SinkHttpConfig) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SinkHttpConfig) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SinkHttpConfig) SetUrl(v string) {
	o.Url = v
}

func (o SinkHttpConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSinkHttpConfig struct {
	value *SinkHttpConfig
	isSet bool
}

func (v NullableSinkHttpConfig) Get() *SinkHttpConfig {
	return v.value
}

func (v *NullableSinkHttpConfig) Set(val *SinkHttpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkHttpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkHttpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkHttpConfig(val *SinkHttpConfig) *NullableSinkHttpConfig {
	return &NullableSinkHttpConfig{value: val, isSet: true}
}

func (v NullableSinkHttpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkHttpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


