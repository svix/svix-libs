/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SinkOut - struct for SinkOut
type SinkOut struct {
	SinkInOneOf *SinkInOneOf
	SinkInOneOf1 *SinkInOneOf1
	SinkInOneOf2 *SinkInOneOf2
	SinkInOneOf3 *SinkInOneOf3
	SinkInOneOf4 *SinkInOneOf4
}

// SinkInOneOfAsSinkOut is a convenience function that returns SinkInOneOf wrapped in SinkOut
func SinkInOneOfAsSinkOut(v *SinkInOneOf) SinkOut {
	return SinkOut{ SinkInOneOf: v}
}

// SinkInOneOf1AsSinkOut is a convenience function that returns SinkInOneOf1 wrapped in SinkOut
func SinkInOneOf1AsSinkOut(v *SinkInOneOf1) SinkOut {
	return SinkOut{ SinkInOneOf1: v}
}

// SinkInOneOf2AsSinkOut is a convenience function that returns SinkInOneOf2 wrapped in SinkOut
func SinkInOneOf2AsSinkOut(v *SinkInOneOf2) SinkOut {
	return SinkOut{ SinkInOneOf2: v}
}

// SinkInOneOf3AsSinkOut is a convenience function that returns SinkInOneOf3 wrapped in SinkOut
func SinkInOneOf3AsSinkOut(v *SinkInOneOf3) SinkOut {
	return SinkOut{ SinkInOneOf3: v}
}

// SinkInOneOf4AsSinkOut is a convenience function that returns SinkInOneOf4 wrapped in SinkOut
func SinkInOneOf4AsSinkOut(v *SinkInOneOf4) SinkOut {
	return SinkOut{ SinkInOneOf4: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SinkOut) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SinkInOneOf
	err = json.Unmarshal(data, &dst.SinkInOneOf)
	if err == nil {
		jsonSinkInOneOf, _ := json.Marshal(dst.SinkInOneOf)
		if string(jsonSinkInOneOf) == "{}" { // empty struct
			dst.SinkInOneOf = nil
		} else {
			match++
		}
	} else {
		dst.SinkInOneOf = nil
	}

	// try to unmarshal data into SinkInOneOf1
	err = json.Unmarshal(data, &dst.SinkInOneOf1)
	if err == nil {
		jsonSinkInOneOf1, _ := json.Marshal(dst.SinkInOneOf1)
		if string(jsonSinkInOneOf1) == "{}" { // empty struct
			dst.SinkInOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.SinkInOneOf1 = nil
	}

	// try to unmarshal data into SinkInOneOf2
	err = json.Unmarshal(data, &dst.SinkInOneOf2)
	if err == nil {
		jsonSinkInOneOf2, _ := json.Marshal(dst.SinkInOneOf2)
		if string(jsonSinkInOneOf2) == "{}" { // empty struct
			dst.SinkInOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.SinkInOneOf2 = nil
	}

	// try to unmarshal data into SinkInOneOf3
	err = json.Unmarshal(data, &dst.SinkInOneOf3)
	if err == nil {
		jsonSinkInOneOf3, _ := json.Marshal(dst.SinkInOneOf3)
		if string(jsonSinkInOneOf3) == "{}" { // empty struct
			dst.SinkInOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.SinkInOneOf3 = nil
	}

	// try to unmarshal data into SinkInOneOf4
	err = json.Unmarshal(data, &dst.SinkInOneOf4)
	if err == nil {
		jsonSinkInOneOf4, _ := json.Marshal(dst.SinkInOneOf4)
		if string(jsonSinkInOneOf4) == "{}" { // empty struct
			dst.SinkInOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.SinkInOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SinkInOneOf = nil
		dst.SinkInOneOf1 = nil
		dst.SinkInOneOf2 = nil
		dst.SinkInOneOf3 = nil
		dst.SinkInOneOf4 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SinkOut)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SinkOut)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SinkOut) MarshalJSON() ([]byte, error) {
	if src.SinkInOneOf != nil {
		return json.Marshal(&src.SinkInOneOf)
	}

	if src.SinkInOneOf1 != nil {
		return json.Marshal(&src.SinkInOneOf1)
	}

	if src.SinkInOneOf2 != nil {
		return json.Marshal(&src.SinkInOneOf2)
	}

	if src.SinkInOneOf3 != nil {
		return json.Marshal(&src.SinkInOneOf3)
	}

	if src.SinkInOneOf4 != nil {
		return json.Marshal(&src.SinkInOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SinkOut) GetActualInstance() (interface{}) {
	if obj.SinkInOneOf != nil {
		return obj.SinkInOneOf
	}

	if obj.SinkInOneOf1 != nil {
		return obj.SinkInOneOf1
	}

	if obj.SinkInOneOf2 != nil {
		return obj.SinkInOneOf2
	}

	if obj.SinkInOneOf3 != nil {
		return obj.SinkInOneOf3
	}

	if obj.SinkInOneOf4 != nil {
		return obj.SinkInOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableSinkOut struct {
	value *SinkOut
	isSet bool
}

func (v NullableSinkOut) Get() *SinkOut {
	return v.value
}

func (v *NullableSinkOut) Set(val *SinkOut) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkOut) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkOut(val *SinkOut) *NullableSinkOut {
	return &NullableSinkOut{value: val, isSet: true}
}

func (v NullableSinkOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


