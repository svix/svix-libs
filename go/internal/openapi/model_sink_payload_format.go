/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SinkPayloadFormat the model 'SinkPayloadFormat'
type SinkPayloadFormat string

// List of SinkPayloadFormat
const (
	SINKPAYLOADFORMAT_JSON SinkPayloadFormat = "json"
)

var allowedSinkPayloadFormatEnumValues = []SinkPayloadFormat{
	"json",
}

func (v *SinkPayloadFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SinkPayloadFormat(value)
	for _, existing := range allowedSinkPayloadFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SinkPayloadFormat", value)
}

// NewSinkPayloadFormatFromValue returns a pointer to a valid SinkPayloadFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSinkPayloadFormatFromValue(v string) (*SinkPayloadFormat, error) {
	ev := SinkPayloadFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SinkPayloadFormat: valid values are %v", v, allowedSinkPayloadFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SinkPayloadFormat) IsValid() bool {
	for _, existing := range allowedSinkPayloadFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SinkPayloadFormat value
func (v SinkPayloadFormat) Ptr() *SinkPayloadFormat {
	return &v
}

type NullableSinkPayloadFormat struct {
	value *SinkPayloadFormat
	isSet bool
}

func (v NullableSinkPayloadFormat) Get() *SinkPayloadFormat {
	return v.value
}

func (v *NullableSinkPayloadFormat) Set(val *SinkPayloadFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkPayloadFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkPayloadFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkPayloadFormat(val *SinkPayloadFormat) *NullableSinkPayloadFormat {
	return &NullableSinkPayloadFormat{value: val, isSet: true}
}

func (v NullableSinkPayloadFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkPayloadFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

