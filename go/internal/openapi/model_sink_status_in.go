/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SinkStatusIn the model 'SinkStatusIn'
type SinkStatusIn string

// List of SinkStatusIn
const (
	SINKSTATUSIN_ENABLED SinkStatusIn = "enabled"
	SINKSTATUSIN_PAUSED SinkStatusIn = "paused"
)

var allowedSinkStatusInEnumValues = []SinkStatusIn{
	"enabled",
	"paused",
}

func (v *SinkStatusIn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SinkStatusIn(value)
	for _, existing := range allowedSinkStatusInEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SinkStatusIn", value)
}

// NewSinkStatusInFromValue returns a pointer to a valid SinkStatusIn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSinkStatusInFromValue(v string) (*SinkStatusIn, error) {
	ev := SinkStatusIn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SinkStatusIn: valid values are %v", v, allowedSinkStatusInEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SinkStatusIn) IsValid() bool {
	for _, existing := range allowedSinkStatusInEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SinkStatusIn value
func (v SinkStatusIn) Ptr() *SinkStatusIn {
	return &v
}

type NullableSinkStatusIn struct {
	value *SinkStatusIn
	isSet bool
}

func (v NullableSinkStatusIn) Get() *SinkStatusIn {
	return v.value
}

func (v *NullableSinkStatusIn) Set(val *SinkStatusIn) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkStatusIn) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkStatusIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkStatusIn(val *SinkStatusIn) *NullableSinkStatusIn {
	return &NullableSinkStatusIn{value: val, isSet: true}
}

func (v NullableSinkStatusIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkStatusIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

