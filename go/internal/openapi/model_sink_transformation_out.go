/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SinkTransformationOut struct for SinkTransformationOut
type SinkTransformationOut struct {
	Code NullableString `json:"code,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewSinkTransformationOut instantiates a new SinkTransformationOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinkTransformationOut() *SinkTransformationOut {
	this := SinkTransformationOut{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewSinkTransformationOutWithDefaults instantiates a new SinkTransformationOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinkTransformationOutWithDefaults() *SinkTransformationOut {
	this := SinkTransformationOut{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SinkTransformationOut) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SinkTransformationOut) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *SinkTransformationOut) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *SinkTransformationOut) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *SinkTransformationOut) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *SinkTransformationOut) UnsetCode() {
	o.Code.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SinkTransformationOut) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinkTransformationOut) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SinkTransformationOut) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SinkTransformationOut) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o SinkTransformationOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableSinkTransformationOut struct {
	value *SinkTransformationOut
	isSet bool
}

func (v NullableSinkTransformationOut) Get() *SinkTransformationOut {
	return v.value
}

func (v *NullableSinkTransformationOut) Set(val *SinkTransformationOut) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkTransformationOut) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkTransformationOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkTransformationOut(val *SinkTransformationOut) *NullableSinkTransformationOut {
	return &NullableSinkTransformationOut{value: val, isSet: true}
}

func (v NullableSinkTransformationOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkTransformationOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


