/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SnowflakeConfig struct for SnowflakeConfig
type SnowflakeConfig struct {
	AccountIdentifier string `json:"accountIdentifier"`
	DbName *string `json:"dbName,omitempty"`
	PrivateKey string `json:"privateKey"`
	SchemaName *string `json:"schemaName,omitempty"`
	TableName *string `json:"tableName,omitempty"`
	UserId string `json:"userId"`
}

// NewSnowflakeConfig instantiates a new SnowflakeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeConfig(accountIdentifier string, privateKey string, userId string) *SnowflakeConfig {
	this := SnowflakeConfig{}
	this.AccountIdentifier = accountIdentifier
	this.PrivateKey = privateKey
	this.UserId = userId
	return &this
}

// NewSnowflakeConfigWithDefaults instantiates a new SnowflakeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeConfigWithDefaults() *SnowflakeConfig {
	this := SnowflakeConfig{}
	return &this
}

// GetAccountIdentifier returns the AccountIdentifier field value
func (o *SnowflakeConfig) GetAccountIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountIdentifier
}

// GetAccountIdentifierOk returns a tuple with the AccountIdentifier field value
// and a boolean to check if the value has been set.
func (o *SnowflakeConfig) GetAccountIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountIdentifier, true
}

// SetAccountIdentifier sets field value
func (o *SnowflakeConfig) SetAccountIdentifier(v string) {
	o.AccountIdentifier = v
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *SnowflakeConfig) GetDbName() string {
	if o == nil || o.DbName == nil {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeConfig) GetDbNameOk() (*string, bool) {
	if o == nil || o.DbName == nil {
		return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *SnowflakeConfig) HasDbName() bool {
	if o != nil && o.DbName != nil {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *SnowflakeConfig) SetDbName(v string) {
	o.DbName = &v
}

// GetPrivateKey returns the PrivateKey field value
func (o *SnowflakeConfig) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *SnowflakeConfig) GetPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *SnowflakeConfig) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise.
func (o *SnowflakeConfig) GetSchemaName() string {
	if o == nil || o.SchemaName == nil {
		var ret string
		return ret
	}
	return *o.SchemaName
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeConfig) GetSchemaNameOk() (*string, bool) {
	if o == nil || o.SchemaName == nil {
		return nil, false
	}
	return o.SchemaName, true
}

// HasSchemaName returns a boolean if a field has been set.
func (o *SnowflakeConfig) HasSchemaName() bool {
	if o != nil && o.SchemaName != nil {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given string and assigns it to the SchemaName field.
func (o *SnowflakeConfig) SetSchemaName(v string) {
	o.SchemaName = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *SnowflakeConfig) GetTableName() string {
	if o == nil || o.TableName == nil {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeConfig) GetTableNameOk() (*string, bool) {
	if o == nil || o.TableName == nil {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *SnowflakeConfig) HasTableName() bool {
	if o != nil && o.TableName != nil {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *SnowflakeConfig) SetTableName(v string) {
	o.TableName = &v
}

// GetUserId returns the UserId field value
func (o *SnowflakeConfig) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SnowflakeConfig) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SnowflakeConfig) SetUserId(v string) {
	o.UserId = v
}

func (o SnowflakeConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountIdentifier"] = o.AccountIdentifier
	}
	if o.DbName != nil {
		toSerialize["dbName"] = o.DbName
	}
	if true {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if o.SchemaName != nil {
		toSerialize["schemaName"] = o.SchemaName
	}
	if o.TableName != nil {
		toSerialize["tableName"] = o.TableName
	}
	if true {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableSnowflakeConfig struct {
	value *SnowflakeConfig
	isSet bool
}

func (v NullableSnowflakeConfig) Get() *SnowflakeConfig {
	return v.value
}

func (v *NullableSnowflakeConfig) Set(val *SnowflakeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeConfig(val *SnowflakeConfig) *NullableSnowflakeConfig {
	return &NullableSnowflakeConfig{value: val, isSet: true}
}

func (v NullableSnowflakeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


