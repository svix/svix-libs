/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StreamIn struct for StreamIn
type StreamIn struct {
	Description string `json:"description"`
	// Optional unique identifier for the stream
	Uid NullableString `json:"uid,omitempty"`
}

// NewStreamIn instantiates a new StreamIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamIn(description string) *StreamIn {
	this := StreamIn{}
	this.Description = description
	return &this
}

// NewStreamInWithDefaults instantiates a new StreamIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamInWithDefaults() *StreamIn {
	this := StreamIn{}
	return &this
}

// GetDescription returns the Description field value
func (o *StreamIn) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *StreamIn) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *StreamIn) SetDescription(v string) {
	o.Description = v
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StreamIn) GetUid() string {
	if o == nil || o.Uid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StreamIn) GetUidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *StreamIn) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableString and assigns it to the Uid field.
func (o *StreamIn) SetUid(v string) {
	o.Uid.Set(&v)
}
// SetUidNil sets the value for Uid to be an explicit nil
func (o *StreamIn) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *StreamIn) UnsetUid() {
	o.Uid.Unset()
}

func (o StreamIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStreamIn struct {
	value *StreamIn
	isSet bool
}

func (v NullableStreamIn) Get() *StreamIn {
	return v.value
}

func (v *NullableStreamIn) Set(val *StreamIn) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamIn) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamIn(val *StreamIn) *NullableStreamIn {
	return &NullableStreamIn{value: val, isSet: true}
}

func (v NullableStreamIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


