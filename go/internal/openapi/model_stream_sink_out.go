/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StreamSinkOut - struct for StreamSinkOut
type StreamSinkOut struct {
	StreamSinkInOneOf *StreamSinkInOneOf
	StreamSinkInOneOf1 *StreamSinkInOneOf1
	StreamSinkInOneOf2 *StreamSinkInOneOf2
}

// StreamSinkInOneOfAsStreamSinkOut is a convenience function that returns StreamSinkInOneOf wrapped in StreamSinkOut
func StreamSinkInOneOfAsStreamSinkOut(v *StreamSinkInOneOf) StreamSinkOut {
	return StreamSinkOut{ StreamSinkInOneOf: v}
}

// StreamSinkInOneOf1AsStreamSinkOut is a convenience function that returns StreamSinkInOneOf1 wrapped in StreamSinkOut
func StreamSinkInOneOf1AsStreamSinkOut(v *StreamSinkInOneOf1) StreamSinkOut {
	return StreamSinkOut{ StreamSinkInOneOf1: v}
}

// StreamSinkInOneOf2AsStreamSinkOut is a convenience function that returns StreamSinkInOneOf2 wrapped in StreamSinkOut
func StreamSinkInOneOf2AsStreamSinkOut(v *StreamSinkInOneOf2) StreamSinkOut {
	return StreamSinkOut{ StreamSinkInOneOf2: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StreamSinkOut) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StreamSinkInOneOf
	err = json.Unmarshal(data, &dst.StreamSinkInOneOf)
	if err == nil {
		jsonStreamSinkInOneOf, _ := json.Marshal(dst.StreamSinkInOneOf)
		if string(jsonStreamSinkInOneOf) == "{}" { // empty struct
			dst.StreamSinkInOneOf = nil
		} else {
			match++
		}
	} else {
		dst.StreamSinkInOneOf = nil
	}

	// try to unmarshal data into StreamSinkInOneOf1
	err = json.Unmarshal(data, &dst.StreamSinkInOneOf1)
	if err == nil {
		jsonStreamSinkInOneOf1, _ := json.Marshal(dst.StreamSinkInOneOf1)
		if string(jsonStreamSinkInOneOf1) == "{}" { // empty struct
			dst.StreamSinkInOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.StreamSinkInOneOf1 = nil
	}

	// try to unmarshal data into StreamSinkInOneOf2
	err = json.Unmarshal(data, &dst.StreamSinkInOneOf2)
	if err == nil {
		jsonStreamSinkInOneOf2, _ := json.Marshal(dst.StreamSinkInOneOf2)
		if string(jsonStreamSinkInOneOf2) == "{}" { // empty struct
			dst.StreamSinkInOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.StreamSinkInOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StreamSinkInOneOf = nil
		dst.StreamSinkInOneOf1 = nil
		dst.StreamSinkInOneOf2 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(StreamSinkOut)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(StreamSinkOut)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StreamSinkOut) MarshalJSON() ([]byte, error) {
	if src.StreamSinkInOneOf != nil {
		return json.Marshal(&src.StreamSinkInOneOf)
	}

	if src.StreamSinkInOneOf1 != nil {
		return json.Marshal(&src.StreamSinkInOneOf1)
	}

	if src.StreamSinkInOneOf2 != nil {
		return json.Marshal(&src.StreamSinkInOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StreamSinkOut) GetActualInstance() (interface{}) {
	if obj.StreamSinkInOneOf != nil {
		return obj.StreamSinkInOneOf
	}

	if obj.StreamSinkInOneOf1 != nil {
		return obj.StreamSinkInOneOf1
	}

	if obj.StreamSinkInOneOf2 != nil {
		return obj.StreamSinkInOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableStreamSinkOut struct {
	value *StreamSinkOut
	isSet bool
}

func (v NullableStreamSinkOut) Get() *StreamSinkOut {
	return v.value
}

func (v *NullableStreamSinkOut) Set(val *StreamSinkOut) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSinkOut) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSinkOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSinkOut(val *StreamSinkOut) *NullableStreamSinkOut {
	return &NullableStreamSinkOut{value: val, isSet: true}
}

func (v NullableStreamSinkOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSinkOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


