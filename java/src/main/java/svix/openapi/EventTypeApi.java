/*
 * Svix
 * The Svix server API documentation
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package svix.openapi;

import svix.ApiCallback;
import svix.ApiClient;
import svix.ApiException;
import svix.ApiResponse;
import svix.Configuration;
import svix.Pair;
import svix.ProgressRequestBody;
import svix.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import svix.openapi.model.EventTypeInOut;
import svix.openapi.model.EventTypeUpdate;
import svix.openapi.model.HTTPValidationError;
import svix.openapi.model.HttpErrorOut;
import svix.openapi.model.ListResponseEventTypeInOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventTypeApi {
    private ApiClient localVarApiClient;

    public EventTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventTypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createEventTypeApiV1EventTypePost
     * @param eventTypeInOut  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventTypeApiV1EventTypePostCall(EventTypeInOut eventTypeInOut, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypeInOut;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventTypeApiV1EventTypePostValidateBeforeCall(EventTypeInOut eventTypeInOut, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeInOut' is set
        if (eventTypeInOut == null) {
            throw new ApiException("Missing the required parameter 'eventTypeInOut' when calling createEventTypeApiV1EventTypePost(Async)");
        }
        

        okhttp3.Call localVarCall = createEventTypeApiV1EventTypePostCall(eventTypeInOut, _callback);
        return localVarCall;

    }

    /**
     * Create Event Type
     * 
     * @param eventTypeInOut  (required)
     * @return EventTypeInOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeInOut createEventTypeApiV1EventTypePost(EventTypeInOut eventTypeInOut) throws ApiException {
        ApiResponse<EventTypeInOut> localVarResp = createEventTypeApiV1EventTypePostWithHttpInfo(eventTypeInOut);
        return localVarResp.getData();
    }

    /**
     * Create Event Type
     * 
     * @param eventTypeInOut  (required)
     * @return ApiResponse&lt;EventTypeInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeInOut> createEventTypeApiV1EventTypePostWithHttpInfo(EventTypeInOut eventTypeInOut) throws ApiException {
        okhttp3.Call localVarCall = createEventTypeApiV1EventTypePostValidateBeforeCall(eventTypeInOut, null);
        Type localVarReturnType = new TypeToken<EventTypeInOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Event Type (asynchronously)
     * 
     * @param eventTypeInOut  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventTypeApiV1EventTypePostAsync(EventTypeInOut eventTypeInOut, final ApiCallback<EventTypeInOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventTypeApiV1EventTypePostValidateBeforeCall(eventTypeInOut, _callback);
        Type localVarReturnType = new TypeToken<EventTypeInOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventTypeApiV1EventTypeEventTypeNameDelete
     * @param eventTypeName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventTypeApiV1EventTypeEventTypeNameDeleteCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}/"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventTypeApiV1EventTypeEventTypeNameDeleteValidateBeforeCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling deleteEventTypeApiV1EventTypeEventTypeNameDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEventTypeApiV1EventTypeEventTypeNameDeleteCall(eventTypeName, _callback);
        return localVarCall;

    }

    /**
     * Delete Event Type
     * 
     * @param eventTypeName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEventTypeApiV1EventTypeEventTypeNameDelete(String eventTypeName) throws ApiException {
        deleteEventTypeApiV1EventTypeEventTypeNameDeleteWithHttpInfo(eventTypeName);
    }

    /**
     * Delete Event Type
     * 
     * @param eventTypeName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEventTypeApiV1EventTypeEventTypeNameDeleteWithHttpInfo(String eventTypeName) throws ApiException {
        okhttp3.Call localVarCall = deleteEventTypeApiV1EventTypeEventTypeNameDeleteValidateBeforeCall(eventTypeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Event Type (asynchronously)
     * 
     * @param eventTypeName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventTypeApiV1EventTypeEventTypeNameDeleteAsync(String eventTypeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventTypeApiV1EventTypeEventTypeNameDeleteValidateBeforeCall(eventTypeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEventTypesApiV1EventTypeGet
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventTypesApiV1EventTypeGetCall(String iterator, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventTypesApiV1EventTypeGetValidateBeforeCall(String iterator, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listEventTypesApiV1EventTypeGetCall(iterator, limit, _callback);
        return localVarCall;

    }

    /**
     * List Event Types
     * 
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @return ListResponseEventTypeInOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseEventTypeInOut listEventTypesApiV1EventTypeGet(String iterator, Integer limit) throws ApiException {
        ApiResponse<ListResponseEventTypeInOut> localVarResp = listEventTypesApiV1EventTypeGetWithHttpInfo(iterator, limit);
        return localVarResp.getData();
    }

    /**
     * List Event Types
     * 
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @return ApiResponse&lt;ListResponseEventTypeInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseEventTypeInOut> listEventTypesApiV1EventTypeGetWithHttpInfo(String iterator, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listEventTypesApiV1EventTypeGetValidateBeforeCall(iterator, limit, null);
        Type localVarReturnType = new TypeToken<ListResponseEventTypeInOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Event Types (asynchronously)
     * 
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventTypesApiV1EventTypeGetAsync(String iterator, Integer limit, final ApiCallback<ListResponseEventTypeInOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventTypesApiV1EventTypeGetValidateBeforeCall(iterator, limit, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEventTypeInOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEventTypeApiV1EventTypeEventTypeNamePut
     * @param eventTypeName  (required)
     * @param eventTypeUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventTypeApiV1EventTypeEventTypeNamePutCall(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypeUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}/"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventTypeApiV1EventTypeEventTypeNamePutValidateBeforeCall(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling updateEventTypeApiV1EventTypeEventTypeNamePut(Async)");
        }
        
        // verify the required parameter 'eventTypeUpdate' is set
        if (eventTypeUpdate == null) {
            throw new ApiException("Missing the required parameter 'eventTypeUpdate' when calling updateEventTypeApiV1EventTypeEventTypeNamePut(Async)");
        }
        

        okhttp3.Call localVarCall = updateEventTypeApiV1EventTypeEventTypeNamePutCall(eventTypeName, eventTypeUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update Event Type
     * 
     * @param eventTypeName  (required)
     * @param eventTypeUpdate  (required)
     * @return EventTypeInOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeInOut updateEventTypeApiV1EventTypeEventTypeNamePut(String eventTypeName, EventTypeUpdate eventTypeUpdate) throws ApiException {
        ApiResponse<EventTypeInOut> localVarResp = updateEventTypeApiV1EventTypeEventTypeNamePutWithHttpInfo(eventTypeName, eventTypeUpdate);
        return localVarResp.getData();
    }

    /**
     * Update Event Type
     * 
     * @param eventTypeName  (required)
     * @param eventTypeUpdate  (required)
     * @return ApiResponse&lt;EventTypeInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeInOut> updateEventTypeApiV1EventTypeEventTypeNamePutWithHttpInfo(String eventTypeName, EventTypeUpdate eventTypeUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateEventTypeApiV1EventTypeEventTypeNamePutValidateBeforeCall(eventTypeName, eventTypeUpdate, null);
        Type localVarReturnType = new TypeToken<EventTypeInOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Event Type (asynchronously)
     * 
     * @param eventTypeName  (required)
     * @param eventTypeUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventTypeApiV1EventTypeEventTypeNamePutAsync(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback<EventTypeInOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventTypeApiV1EventTypeEventTypeNamePutValidateBeforeCall(eventTypeName, eventTypeUpdate, _callback);
        Type localVarReturnType = new TypeToken<EventTypeInOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
