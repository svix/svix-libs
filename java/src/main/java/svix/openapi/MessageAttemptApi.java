/*
 * Svix
 * The Svix server API documentation
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package svix.openapi;

import svix.ApiCallback;
import svix.ApiClient;
import svix.ApiException;
import svix.ApiResponse;
import svix.Configuration;
import svix.Pair;
import svix.ProgressRequestBody;
import svix.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import svix.openapi.model.HTTPValidationError;
import svix.openapi.model.HttpErrorOut;
import svix.openapi.model.ListResponseEndpointMessageOut;
import svix.openapi.model.ListResponseMessageAttemptEndpointOut;
import svix.openapi.model.ListResponseMessageAttemptOut;
import svix.openapi.model.ListResponseMessageEndpointOut;
import svix.openapi.model.MessageAttemptOut;
import svix.openapi.model.MessageStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageAttemptApi {
    private ApiClient localVarApiClient;

    public MessageAttemptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageAttemptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCall(String attemptId, String msgId, String appId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/"
            .replaceAll("\\{" + "attempt_id" + "\\}", localVarApiClient.escapeString(attemptId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetValidateBeforeCall(String attemptId, String msgId, String appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCall(attemptId, msgId, appId, _callback);
        return localVarCall;

    }

    /**
     * Get Attempt
     * 
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @return MessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttemptOut getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(String attemptId, String msgId, String appId) throws ApiException {
        ApiResponse<MessageAttemptOut> localVarResp = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo(attemptId, msgId, appId);
        return localVarResp.getData();
    }

    /**
     * Get Attempt
     * 
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;MessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttemptOut> getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo(String attemptId, String msgId, String appId) throws ApiException {
        okhttp3.Call localVarCall = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetValidateBeforeCall(attemptId, msgId, appId, null);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attempt (asynchronously)
     * 
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsync(String attemptId, String msgId, String appId, final ApiCallback<MessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetValidateBeforeCall(attemptId, msgId, appId, _callback);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCall(String msgId, String appId, String iterator, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/"
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetValidateBeforeCall(String msgId, String appId, String iterator, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(Async)");
        }
        

        okhttp3.Call localVarCall = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCall(msgId, appId, iterator, limit, _callback);
        return localVarCall;

    }

    /**
     * List Attempted Destinations
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @return ListResponseMessageEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageEndpointOut listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(String msgId, String appId, String iterator, Integer limit) throws ApiException {
        ApiResponse<ListResponseMessageEndpointOut> localVarResp = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo(msgId, appId, iterator, limit);
        return localVarResp.getData();
    }

    /**
     * List Attempted Destinations
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @return ApiResponse&lt;ListResponseMessageEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageEndpointOut> listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo(String msgId, String appId, String iterator, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetValidateBeforeCall(msgId, appId, iterator, limit, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempted Destinations (asynchronously)
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsync(String msgId, String appId, String iterator, Integer limit, final ApiCallback<ListResponseMessageEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetValidateBeforeCall(msgId, appId, iterator, limit, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCall(String endpointId, String appId, String iterator, Integer limit, MessageStatus status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/"
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()))
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetValidateBeforeCall(String endpointId, String appId, String iterator, Integer limit, MessageStatus status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(Async)");
        }
        

        okhttp3.Call localVarCall = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCall(endpointId, appId, iterator, limit, status, _callback);
        return localVarCall;

    }

    /**
     * List Attempted Messages
     * 
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @return ListResponseEndpointMessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseEndpointMessageOut listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(String endpointId, String appId, String iterator, Integer limit, MessageStatus status) throws ApiException {
        ApiResponse<ListResponseEndpointMessageOut> localVarResp = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo(endpointId, appId, iterator, limit, status);
        return localVarResp.getData();
    }

    /**
     * List Attempted Messages
     * 
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @return ApiResponse&lt;ListResponseEndpointMessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseEndpointMessageOut> listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo(String endpointId, String appId, String iterator, Integer limit, MessageStatus status) throws ApiException {
        okhttp3.Call localVarCall = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetValidateBeforeCall(endpointId, appId, iterator, limit, status, null);
        Type localVarReturnType = new TypeToken<ListResponseEndpointMessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempted Messages (asynchronously)
     * 
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsync(String endpointId, String appId, String iterator, Integer limit, MessageStatus status, final ApiCallback<ListResponseEndpointMessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetValidateBeforeCall(endpointId, appId, iterator, limit, status, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEndpointMessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCall(String msgId, String appId, String iterator, Integer limit, MessageStatus status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/"
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetValidateBeforeCall(String msgId, String appId, String iterator, Integer limit, MessageStatus status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(Async)");
        }
        

        okhttp3.Call localVarCall = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCall(msgId, appId, iterator, limit, status, _callback);
        return localVarCall;

    }

    /**
     * List Attempts
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageAttemptOut listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(String msgId, String appId, String iterator, Integer limit, MessageStatus status) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo(msgId, appId, iterator, limit, status);
        return localVarResp.getData();
    }

    /**
     * List Attempts
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageAttemptOut> listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo(String msgId, String appId, String iterator, Integer limit, MessageStatus status) throws ApiException {
        okhttp3.Call localVarCall = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetValidateBeforeCall(msgId, appId, iterator, limit, status, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts (asynchronously)
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsync(String msgId, String appId, String iterator, Integer limit, MessageStatus status, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetValidateBeforeCall(msgId, appId, iterator, limit, status, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCall(String msgId, String appId, String endpointId, String iterator, Integer limit, MessageStatus status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/"
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetValidateBeforeCall(String msgId, String appId, String endpointId, String iterator, Integer limit, MessageStatus status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(Async)");
        }
        

        okhttp3.Call localVarCall = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCall(msgId, appId, endpointId, iterator, limit, status, _callback);
        return localVarCall;

    }

    /**
     * List Attempts For Endpoint
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @return ListResponseMessageAttemptEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageAttemptEndpointOut listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(String msgId, String appId, String endpointId, String iterator, Integer limit, MessageStatus status) throws ApiException {
        ApiResponse<ListResponseMessageAttemptEndpointOut> localVarResp = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo(msgId, appId, endpointId, iterator, limit, status);
        return localVarResp.getData();
    }

    /**
     * List Attempts For Endpoint
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageAttemptEndpointOut> listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo(String msgId, String appId, String endpointId, String iterator, Integer limit, MessageStatus status) throws ApiException {
        okhttp3.Call localVarCall = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetValidateBeforeCall(msgId, appId, endpointId, iterator, limit, status, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts For Endpoint (asynchronously)
     * 
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsync(String msgId, String appId, String endpointId, String iterator, Integer limit, MessageStatus status, final ApiCallback<ListResponseMessageAttemptEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetValidateBeforeCall(msgId, appId, endpointId, iterator, limit, status, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCall(String endpointId, String msgId, String appId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/"
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostValidateBeforeCall(String endpointId, String msgId, String appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(Async)");
        }
        

        okhttp3.Call localVarCall = resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCall(endpointId, msgId, appId, _callback);
        return localVarCall;

    }

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(String endpointId, String msgId, String appId) throws ApiException {
        ApiResponse<Object> localVarResp = resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo(endpointId, msgId, appId);
        return localVarResp.getData();
    }

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo(String endpointId, String msgId, String appId) throws ApiException {
        okhttp3.Call localVarCall = resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostValidateBeforeCall(endpointId, msgId, appId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend Webhook (asynchronously)
     * Resend a message to the specified endpoint.
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsync(String endpointId, String msgId, String appId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostValidateBeforeCall(endpointId, msgId, appId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
