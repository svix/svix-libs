/*
 * Svix
 * The Svix server API documentation
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package svix.openapi;

import svix.ApiException;
import svix.openapi.model.EndpointIn;
import svix.openapi.model.EndpointOut;
import svix.openapi.model.EndpointSecret;
import svix.openapi.model.EndpointStats;
import svix.openapi.model.HTTPValidationError;
import svix.openapi.model.HttpErrorOut;
import svix.openapi.model.ListResponseEndpointOut;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndpointApi
 */
@Ignore
public class EndpointApiTest {

    private final EndpointApi api = new EndpointApi();

    
    /**
     * Create Endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEndpointApiV1AppAppIdEndpointPostTest() throws ApiException {
        String appId = null;
        EndpointIn endpointIn = null;
        EndpointOut response = api.createEndpointApiV1AppAppIdEndpointPost(appId, endpointIn);

        // TODO: test validations
    }
    
    /**
     * Delete Endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        api.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId, appId);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointApiV1AppAppIdEndpointEndpointIdGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        EndpointOut response = api.getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId, appId);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Secret
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        EndpointSecret response = api.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId, appId);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Stats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        EndpointStats response = api.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId, appId);

        // TODO: test validations
    }
    
    /**
     * List Endpoints
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEndpointsApiV1AppAppIdEndpointGetTest() throws ApiException {
        String appId = null;
        String iterator = null;
        Integer limit = null;
        ListResponseEndpointOut response = api.listEndpointsApiV1AppAppIdEndpointGet(appId, iterator, limit);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEndpointApiV1AppAppIdEndpointEndpointIdPutTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        EndpointIn endpointIn = null;
        EndpointOut response = api.updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId, appId, endpointIn);

        // TODO: test validations
    }
    
}
